
\
\  Scott Ng-Evans for Phillips' lab (2006)
\

\  A modification of the Forced_Choice program.
\  Modified from Mark_forced_choice12.mpc (Ng-Evans, 2005/06)
\
\
\  No head entry required to start trial.
\  No missed trials repeated.
\  Meant to run with most trials being forced.
\  J, P, Q, R lists added. These lists are for left (2) or right (1) lever presentation.
\    These lists were generated by an experimentor to insure that there are not too many
\     of the same consecutive lever presentations. List K provides a way the program
\     randomly chooses which lever list (J, P, Q, or R) to work from. This is chosen at
\     the time of program loading.
\     BIT coding was changed so that there is no digital pulse with the start of a trial; instead
\     there is a lever-specific pulse when a lever is presented. Two simultaneous pulses if both
\     levers are presented.
\
\  White noise is on when the contingencies are not active (consistent with the Decision paradigm).
\  A simulated response 8 during white noise is issued to save the data and end session when the experimenter chooses.
\
\
\  June/July 2006 - Added ability to make levers probabilistic (deliver reward with some probability).
\                    The probability is determined by the prob lists, B,D,E,L (right lever) and U,V,W,X (left lever).
\                 - Fixed an old timing issue that was resolved after version 12 of Mark_forced_choice.
\                 - Truncated identity and time-stamp arrays.
\                 - Increased number of trials per block to 12.
\                 - Made times so they retain minutes and seconds when viewed after START.
\                 - Changed head-entry state set to reflect no head entry on start.
\                 - Fixed issue with last trial not recording properly, head entries not recorded before first
\                    lever press in trial.
\
\
\  August 2006    - Added time-limit for FR completion
\
\
\  April 2007     - Fixed bug that would not shut off timer for FR
\                    time-limit when FR = 1, because Z2 and Z9!Z10!Z13!Z14
\                    occur at the same time when FR = 1
\
\  June 2007      - Version 5 - Added Z19 output (bit 10) for no reinforcement due to probabilistic
\                    contingencies on a lever.
\                 - Reinstated Z23 as bit 12 for choice trial (both levers presented)
\                    on PEMP's request
\                 - Removed Z24 and Z25 as bit 12 and 13 for right lever extends and
\                    left lever extends respectively; on PEMP's request. Redundancy with
\                    bits Z11, Z12 and newly reinstated Z23
\                 - Fixed some timing issues that would occur if delay-to-reinforcement
\                    were used. These were found in the Bernstein lab which uses
\                    Mark_forced_choice21_Bernstein_XX_XX.MPC with delays to reinforcement
\                    delivery in addition to probabilistic contingencies.
\                 - Version 6 - Added the possibility of differential reward on the probabilistic levers
\                    instead of a binary reward-or-no-reward contingency. This also necessitated
\                    the addition of menu choices for the magnitude of these rewards.
\
\  July 2007      - Added the ability to choose whether the lever presented (left or right) is pseudo-random
\                    on forced trials or just right or just left. A(29) indicates this option.
\
\  January 2008   - Added the ability to have a criterion of HR responses on choice trials for ending the
\                    session.
\
\  February 2008  - Added an option for misssed trials to be repeated as requested by Mark Walton.
\
\  March 2008     - Added low effort lever choices in the calculation for criterion to end the session
\
\                 - Mark Walton:"...to be able to set the session end point to be a certain number of trials
\                    after they reach a certain criterion (e.g., 40 trials after getting to 10/12 choices
\                    of the HR/LE, etc.).  This way, we won't get animals getting habituated to a particular
\                    contingency and can alter the session length ourselves."
\
\      5-2008     - Mark Walton:"...
\                   (a) Some way of getting free pellet release time-locked to voltammetry, either
\                       with a separate programme (I guess a short simple version of the magtrain
\                       without a lever - 30sec, pellet delivery sometime during that period) or, as you
\                       suggested, as an addition to the leversampling such that we could do it before
\                       running the main behaviour.
\                   (b) A way (again, either a completely separate programme or as part of
\                       leversampling) of imposing a delay between cue onset and lever extension.  I can
\                       imagine situations where it would be useful if this were either a fixed interval
\                       or a variable one.
\                   Used S.S.1 for presession pellet delivery when response 6 is simulated,
\                    used BIT 10 for pre or post-session pellet delivery
\
\      8-2008     - Mark Walton requests "we want is some marker of lever extension, not necessarily which lever has come out"
\                    Took out Z11 and Z12 activation of BITs 2 and 3 because with a cue lt-to-lever extension
\                     delay, these no longer really marked lever extension (they do when there is no delay).
\                    Instead, activated BIT 2 with either Z24 or Z25. Also made Z27 and Z28 activate BITs 14 and 3
\                     respectively so that cue light onset is marked.
\
\                 - Mark Walton requests "when we delay the reward by X sec, the cue light stays illuminated until
\                     the reward is delivered".
\                    Added A(43) as a menu choice to leave the cue light illuminated or not.
\
\                 - Upon request from J. Gan to aid in cutting BIT 13 was shifted from Z26 to Z5
\                    so that missed trials could be excluded.
\
\      9-2008     - J.Gan requests that the forced lever extension bits be reinstated. Because all 16 bits are used,
\                    all head entries were made one bit, BIT 7 (except HE for pellet, BIT 11), freeing two bits for
\                    forced right- and left-lever extension.
\                    Previously bits marked the program's choice of forced right- or left-lever and this was fine
\                     until the option for a delay between cue light and lever extension was added; then this
\                     necessitated bits be added to mark cue light onset distinctly from lever extension.
\
\
\      7-2009     - J. Gan requests that criterion also be applied to the delay condition such that
\                    the shorter delays be cumulated as HR choices. See menu item for criterion and A(32).
\
\      1-2010     - S. Sandberg requests for the program to end immediately rather than using the Response 8.
\                    Other people want the cued end to the session (whitenoise on, hl off) and the ability to
\                    manually drop a pellet at the end. So added a choice to use Resp 8 or not (A(44)).
\
\      4-2010     - Jerylin Gan: "I need to be able to tell the computer what the 'high value' is (either
\                                 by designating a lever or by designating what is more important: pellets or fr)"
\
\      7-2010     - M. Walton reports bug when delay between cue light onset and lever extension is used.
\                   When this is used, the time allowed to initiate an FR sometimes is the sume of the
\                    time given by A(18) from the menu and the delay time A(42) (based on menu choice
\                    A(40)).
\                   It was found that when this delay option was added in 2008, the delay A(42) was added to the
\                    time limit for initiating an FR. Also some of the state sets had a conditional that looked
\                    to see if there was a delay first before trial type etc. These were changed so that they
\                    always will wait for lever extension before looking for lever responses; and the lever extension
\                    state set was changed such that it is 'in charge' of the cue light-lever extension delay, sending
\                    the Z24. Z25 lever extensions signals only when the delay is complete.
\                 - Extra Z24 and Z25 signal removed from the lever extension/retraction state set when choice is made.
\                 - Moved session timer state set to the end of the non-TTL state sets.
\                 - Changed head entry state set so that it just waits for the Z6 (end of timeout) to start recording
\                    again.
\
\      9-2010     - Inceased the size of the Y array because one of Jerylin Gan's rats was going beyond 50 'hits'
\                    in choice trials and not reaching criterion
\                 - Also fixed Z7 and Z8 so they are given after pellets delivered and any delay to pellet delivery is over,
\                     Prior to this, Z7 and Z8 were given before the delay to pellet, which is fine if there is no
\                     delay to pellet (A(6) and A(7) close to 0sec), but when this delay is used this necessitated the
\                     delay times (A(6) and A(7) be added to the ITI. Now this is not necessary since the ITI will
\                     start after the delay and pellet delivery as it should be.
\
\                 - Changed the J, P, Q, and R arrays from 12 to 8 elements and then changed SS14 so it chooses 8
\                   elements instead of 12. Changed dim of O array to 7 (0-7). All this was from when the blocks
\                   were 12 long instead of 8.
\
\     11-2010     - M. Walton: "adapt leversampling to have built in "reversals" after animals have reached criteria?
\                               At the moment, any time Jerylin or I or Stefan have run a reversal, we need either to
\                               manually re-start the program, which causes delays and clear cues such as fan going off/on
\                               briefly as the last session is saved and a new one started, etc., or to change the settings
\                               mid-session, which requires some quick finger work and a need to set a lot of trials.
\                               Also, both put a lot of strain on the experimenter as he/she has to sit and watch the screen
\                               to get the correct moment to switch stuff over.  I'm interested to know if it would be straightforward
\                               to have some option that might allow a second set of cost-benefit contingencies to be implemented
\                               after a certain point, e.g., after animals reach criteria plus 16 trials or something?"
\
\     1-2011      - M. Walton: "The one thing I did wonder about was whether there could be a separate ITI (ISI?) for
\                               the time between the sessions."
\                 - J. Gan: Wants an alternate feeder added; specialfeeder constant added
\
\     2-2011      - Added C(16), flag that signal reinforcement and traylight are finished. This allows
\                    the timer between 1st and 2nd session to start AFTER traylight time finished
\
\     2-2011      - N. Hollon and J. Gan do not want BIT13 as the end of session marker, it makes the cutting
\                    using it as a missed trial marker difficult. I removed BIT13 as end of trial marker,
\                    it now signals only missed trial (Z31 added for this; note that only 32 Z-pulses allowed by MEDPC).
\
\     3-2011      - Option added for a non-FR-compensated ITI with jitter. Reduced reinforcement probability lists
\                    to two per lever to free up variables for this ITI change and future additions. Non-FR-compensated
\                    ITI list is set up at start based on values entered for mean ITI, jitter, and jitter multiplier:
\                    for example if ITI value = 45, jitter = 5 and jitter multiplier = 2, then ITI list would be
\                    35, 40, 45, 50, 55 seconds. For each trial, the ITI is randomly chosen from the list.
\
\     3-2011      - Set default value for feeder output number (A(64)); if this is not done, manual delivery of pre-START
\                    pellets via response 6 does not work
\
\     4-2011      - M. Walton, N. Hollon ask for ITI that is not altered by the time to complete FR
\
\
\     4-2011      - Nick Hollon: "Please make sure the sequence of forced trials is more randomized than it currently appears
\                                  to be -- random without replacement for each block of 4 forced trials, 2 of each trial
\                                  type / lever side. It currently appears to repeat 2-block sequences (8 total forced trials)
\                                  across an entire session, so the sequence could become quite predictable after the second block.
\                                  Each block of should have an independent sequence of these 4 trials."
\                                - Changed the J, P, Q, and R arrays from 8 to 4 elements and then changed SS14 so it chooses 4
\                                  elements instead of 8. Changed dim of O array to 3 (0-3).
\
\     10-2011     - Nick Hollon wants the FR compensation/non-compensation variables to be included in 2nd session
\
\     11-2011     - Nick Hollon: - "...the first session should switch over to the second session once it has reached
\                                   the Max # of trials (or max session time) even if the choice Criterion has not been met..."
\                                - "I'd also like to have an option to set the Max # of trials for the second session,
\                                   independent of the 1st session."
\                                - "...it would be good to have the option to define each trial type within a block
\                                   for the 2nd session separately from the first..."
\                                - "An option to require rats to make a Head Entry to initiate a trial, after the ITI has elapsed...
\                                   this should be uncued (no magazine light when the ITI is up) and no time limit to initiate."
\
\     11-2011     - Nick Hollon: - "...currently the house light turns on when the ITI is over (presumably after a post-miss
\                                    time-out too). Can you move this so that it turns on simultaneously with the cue lights
\                                    instead? As is, it would be problematic when we want rats to initiate the trials with a
\                                    head entry that is uncued - the house light currently cues when they can initiate."
\
\                                    Made HL contingent on Z3 (simulated or real) and needed to change what happens in HL
\                                     SS when there is a timeout and it comes back from TO. HL should not be tied to cue lights
\                                     in case these need to be dissociated in the future.
\
\     12-2011      - Nick Hollon requests that a choice for 2nd session time out length is added. A(213) is added as the value in seconds
\
\     1-2012       - Nick Hollon: - "Could you...add additional event codes for the cuelight onsets?"
\                                 - Added event codes for cue light ON and cue light OFF for left and right cue lights
\
\                                 - Added event codes for left and right lever extension retraction (also clarified comments
\                                    describing event codes 21,22, and 23 as occurring at the start of the trial once
\                                    the decision about which lever(s) to extend is made)
\
\     2-2012       - bug fix - when there are very long FRs it is possible (although very unlikely) that an animal
\                              will trip the timer for taking too long to completet the FR and within the same
\                              10-msec period do the last response to complete the FR
\                            - added a contingency in the FR completion state set that double checks to see that the timer
\                              for FR completion has not been tripped yet before emitting a Z2 reward signal
\                            - this is version 34_3
\
\     3-2012       - added Z30 catch in state 8 of state set 1, based on report by N Hollon that one session seemed to hang
\                     upon reset
\                  - also maintained timer H after Z29 reset signalled issued, so that the data file will indicate how much time
\                     passed between issuing the reset signal (Z29) and actually resetting (Z30)
\
\     3-2012       - modified state set 1 such that it does not 'listen' for a Z29, just listens for Z30 signal and does the reset
\                  - it appears the reason for failure to reset was that setting up the E list took too long and whilst it was doing
\                     this in old state 9, the Z29 was not picked up; it would then go to ITI state (5); if the ITI was more than the time
\                     between the 1st and 2nd session, the Z30 signal was given while still in ITI state and therefore not
\                     picked up; once the ITI was over it would go to state 2, but Z30 was already done, so it would remain there,
\                     now Z30 will be picked up no matter which state that state set 1 is in
\
\     5-2012       - Nick Hollon asks that bit 15 not be activated when timeout ends if there is a HE requirement
\
\
\     11-2012      - Changed inputs, outputs and menu defaults for Susan Ferguson lab... program changes name from
\                     "LeverSampling34_5" to "SFerg_LeverSampling34_5"
\
\
\
\


\
\   OUTPUTS
\
   ^leftlever       = 1
   ^rightlever    = 2
   ^feeder        = 3
   ^leftlt           = 4
   ^rightlt          = 5
   ^traylt           = 6
   ^houselt          = 7
   ^tone             = 8
   ^pump             = 9
   ^fan              = 10
   ^whitenoise    = 80   \ Placeholder for whitenoise not in Ferguson boxes
   ^specialfeeder = 81   \ Placeholder for second feeder not in Ferguson boxes


\
\   INPUTS
\
   ^leftleverin   = 1
   ^rightleverin  = 3
   ^headentry     = 5

\  End session and save data = response 8
\  Manual pellet delivery with TTL pre or post session = response 6 (BIT 10)
\


\
\   Z-pulses
\
\   Z1 - start trial
\   Z2 - reward
\   Z3 - head entry @ start; simulated after ITI ends for LEVERSAMPLING with no HE requirement
\         ***** VERSION 34 ON USED FOR BIT 15 *****
\   Z4 - lever choice made, or first choice trial lever press (i.e. the choice)
\   Z5 - time-out start, or end of session
\   Z6 - time-out over
\   Z7 - reinforcement has been delivered, start ITI for right lever
\   Z8 - reinforcement has been delivered, start ITI for left lever
\   Z29 - RESET Session after criterion/overrun - signals archive of variables and reset of all state sets
\   Z30 - Start RESET session
\   Z32 - Dummy pulse, signalled instead of Z3 if head entry required to initiate trial
\          Head entry would then give the Z3 instead
\   Z9 to Z28, Z31  - marks events for TTL outputs
\     Z9 - Lever choice right                                             - BIT 0
\     Z10 - Lever choice left                                             - BIT 1
\     Z11 - Forced trial right lever presented                            - BIT 8
\     Z12 - Forced trial left lever presented                             - BIT 9
\     Z13 - Initial forced trial lever press right                        - BIT 4
\     Z14 - Initial forced trial lever press left                         - BIT 5
\     Z15 - Any lever press, right or left                                - BIT 6
\     Z16 - Head entries during trial                                     - BIT 7
\     Z17 - Head entries during ITI                                       - BIT 7
\     Z18 - Head entries during time-out                                  - BIT 7
\     Z19 - Traylight at the time that reinf delivery would occur;        - BIT 10
\             Also TTL for pre or postsession experimenter-initiated
\             pellet delivery
\     Z20 - Head entry for food pellet                                    - BIT 11
\     Z21 - ITI over, trial starts; ICS signal                            - BIT 15  ****** DEPRICATED IN VERSION 34 ON, REPLACED WITH Z3         *******
\     Z22 - Time-out over, trial starts; ICS signal                       - BIT 15  ****** Also activated by Z3, see above                       *******
\                                                                                           VERSION 35 and above - not activated if HE required
\     Z23 - A choice trial is initiated (both levers presented)           - BIT 12
\     Z24 - Right lever extends                                           - BIT 2
\     Z25 - Left lever extends                                            - BIT 2
\     Z26 - Reward for probabilistic "1" condition sent before any delay  -
\     Z27 - Right cue lt on                                               - BIT 14
\     Z28 - Left cue lt on                                                - BIT 3
\     Z31 - Time-out start                                                - BIT 13
\
\
\   Event stamps ( array I )
\
\   1 = Rt lever response
\   2 = Lt lever response
\   3 = Rewarded rt lever response
\   4 = Rewarded lt lever response
\   5 = Reinforcement delivery
\   6 = Time-out, no initial head-entry in 10 sec
\   7 = Time-out, no lever response choice in 10 sec
\   8 = Lever choice right
\   9 = Lever choice left
\   10 = Initial head entry in trial *** NOT USED IN LEVERSAMPLING ***
\   11 = Trial head entries
\   12 = Right lever press during time-out
\   13 = Left lever press during time-out
\   14 = Head entry during time-out
\   15 = Time-out over
\   16 = ITI over
\   17 = Initial forced trial lever press right
\   18 = Initial forced trial lever press left
\   19 = Time-out, no right lever response forced in 10 seconds
\   20 = Time-out, no left lever response forced in 10 seconds
\   21 = Forced trial start (right lever)
\   22 = Forced trial start (left lever)
\   23 = Choice trial start
\   24 = Head entry during ITI
\   25 = ICS signal
\   26 = Extinction trial
\   27 = Time-out, FR not complete within time-limit
\   29 = Session RESET signal issued ('cocked')
\   30 = Session reSTART for RESET issued ('fire')
\   31 = Initiation head entry when head entry is required for trial start
\   32 = Right cue light ON
\   33 = Left cue light ON
\   34 = Right cue light OFF
\   35 = Left cue light OFF
\   36 = Right lever extends
\   37 = Left lever extends
\   38 = Right lever retracts
\   39 = Left lever retracts
\
\
\   Variables
\
\   A(1) = Intertrial interval calculated
\   A(2) = FR for right lever
\   A(3) = FR for left lever
\   A(4) = Reward on right lever (non-probabilistic)
\   A(5) = Reward on left lever (non-probabilistic)
\   A(6) = Delay before reinforcer delivery for the right lever
\   A(7) = Delay before reinforcer delivery for the left lever
\   A(8) = Lever choice (1 = right, 2 = left lever)
\   A(9) = Maximum session length
\   A(10) = Forced or choice (1 = forced, -1 = choice)
\   A(11) = Time to complete FR in seconds
\   A(12) = Time-out length
\   A(13) = Maximum FR - no longer used
\   A(14) = Maximum FR-compensated intertrial interval (60 seconds default)
\   A(15) = Minimum FR-compensated intertrial interval (30 seconds default);if FR-compensated ITI is shorter than this, ITI set to this
\   A(16) = Counter for trial number
\   A(17) = Maximum number of trials (60 default)
\   A(18) = Time limit defining a miss (10 seconds default)
\   A(19) = Counter for completed right lever FRs
\   A(20) = Counter for completed left lever FRs
\   A(21) = Counter for lever list, counter for reinf probs list
\   A(22) = Probabilistic lever (0=None, 1=Right, 2=Left, 3=Both)
\   A(23) = Choice from reinf prob list N
\   A(24) = Time limit for FR completion
\   A(25) = Reward on probabilistic right lever, "0" condition
\   A(26) = Reward on probabilistic left lever, "0" condition
\   A(27) = Reward on probabilistic right lever, "1" condition
\   A(28) = Reward on probabilistic left lever, "1" condition
\   A(29) = Random lever presentation or not (0 = Random, 1 = Right, 2 = Left)
\   A(30) = Trial countdown in Y HIT/MISS list checker
\   A(31) = Count of HITs in Y list checker
\   A(32) = Criterion; number of high reward (HR) or low effort (LE) lever choices made
\            in the last 12 choice trials that causes contingencies to end
\   A(33) = Counter for number of choice trials
\   A(34) = Repeat missed trials or not (0=Yes  1=No)
\   A(35) = Number of trials after criterion to run
\   A(36) = Switch for overrunning criterion
\   A(37) = Temporary holder for A(35) so that it can be decremented
\   A(38) = Flag to indicate that HR/LE criterion has been reached
\   A(40) = Delay between cue presentation and lever extension
\   A(41) = Dummy variable for menu display
\   A(42) = Final holder of delay between cue light and lev extension
\   A(43) = Does the cue light stay on during the delay from lev retraction to reward, if there
\            is any (0:NO  1:YES)
\   A(44) = Use F8 to terminate session when done? (0:NO 1:YES)
\   A(45) = Lever used for criterion instead of High Reward/Low Effort/Short Delay? (0:NO  1:RIGHT  2:LEFT)
\   A(46) = Dummy variable for manu display
\   A(47) = Dummy variable for manu display
\   A(48) = Dummy variable for manu display
\   ** Session RESET variables **
\   A(49) = 2ndFR for right lever
\   A(50) = 2ndFR for left lever
\   A(51) = 2ndReward for right lever (non-probabilistic)
\   A(52) = 2ndReward for left lever (non-probabilistic)
\   A(53) = 2ndReward for right lever (PROBABILISTIC "0")
\   A(54) = 2ndReward for left lever (PROBABILISTIC "0")
\   A(55) = 2ndReward for right lever (PROBABILISTIC "1")
\   A(56) = 2ndReward for left lever (PROBABILISTIC "1")
\   A(57) = 2ndDelay to reward on right lever (seconds)
\   A(58) = 2ndDelay to reward on left lever (seconds)
\   A(59) = 2ndLever for choice criterion? (1:RT  2:LT)
\   A(60) = 2ndCriterion for HR/LE/SD choices (>0 #out of last 12)
\   A(61) = Reset session after criterion/overrun (0:no 1:yes)
\   A(62) = Feeder to use in session
\   A(63) = Time to wait between sessions when reset occurs
\   A(64) = Holds output number for feeder to use
\   A(65) = 2ndCue light to lever delay (seconds  -1=VARIABLE)
\   A(66) = 2ndMaximum ITI length (seconds)
\   A(67) = Offset for display so 2nd session's results do not overwrite 1st session's
\   A(68) = 2nd number of trials to run after criterion
\   A(69) = Use FR-compensated (FR-comp) ITI or not (0:NO  1:YES)
\   A(70) = NoN FR-comp ITI value (sec)
\   A(71) = NON FR-comp ITI jitter (+-sec)
\   A(72) = NON FR-comp ITI jitter intervals (number of jitters to add and subtract from mean ITI
\            to generate ITI list; ex: if mean ITI = 30, jitter = +/-10 and jitter intervals = 2,
\            then ITI list is 10, 20, 30, 40, 50sec
\   A(73) = Used in calculations to set up ITI list
\   A(74) = Counter for setting up ITI list
\   A(75) = Positin in NONFRcomp ITI list when choosing
\   A(76) = 2ndFR-compensated ITI (FR-comp? 0:NO 1:YES) = A(76)
\   A(77) = 2ndMinimum FR-comp ITI (sec) = A(77)
\   A(66) = 2ndMaximum FR-comp ITI (sec) = A(66)
\   A(78) = 2ndNON FR-comp ITI value (sec) = A(78)
\   A(79) = 2ndNON FR-comp ITI jitter (+-sec) = A(79)
\   A(80) = 2ndNON FR-comp ITI jitter intervals = A(80)
\   A(200) = 2ndMaximum number of trials
\   A(201) = 2ndMaximum session length
\   A(202) = 2ndSession forced or choice, block pos 1
\   A(203) = 2ndSession forced or choice, block pos 2
\   A(204) = 2ndSession forced or choice, block pos 3
\   A(205) = 2ndSession forced or choice, block pos 4
\   A(206) = 2ndSession forced or choice, block pos 5
\   A(207) = 2ndSession forced or choice, block pos 6
\   A(208) = 2ndSession forced or choice, block pos 7
\   A(209) = 2ndSession forced or choice, block pos 8
\   A(210) = Require head entry to initiate a trial (0:NO 1:YES)
\   A(211) = Value for Z pulse for simulated head entry if non required
\   A(212) = Used to flag Z4 or Z23 signal after timeout if HE required
\   A(213) = 2ndTime-out length after miss (seconds)

\
\   ** If session RESET, save settings from first session to be recorded in data file
\   A(81) = Archived FR for left lever, A(3)
\   A(82) = " Reward on right lever (non-probabilistic), A(4)
\   A(83) = " Reward on left lever (non-probabilistic), A(5)
\   A(84) = " Delay before reinforcer delivery for the right lever, A(6)
\   A(85) = " Delay before reinforcer delivery for the left lever, A(7)
\   A(86) = " Reward on probabilistic right lever, "0" condition, A(25)
\   A(87) = " Reward on probabilistic left lever, "0" condition, A(26)
\   A(88) = " Reward on probabilistic right lever, "1" condition, A(27)
\   A(89) = " Reward on probabilistic left lever, "1" condition, A(28)
\   A(90) = " Criterion; number of high reward (HR) or low effort (LE) lever choices made
\            in the last 12 choice trials that causes contingencies to end, A(32)
\   A(91) = " Lever used for criterion instead of High Reward/Low Effort/Short Delay? (0:NO  1:RIGHT  2:LEFT), A(45)
\   A(92) = " Cue light to lever delay (seconds,  -1=variable), A(40)
\   A(93) = " Maximum FR-compensated ITI length (seconds), A(14)
\   A(94) = " Number of trials to run after criterion, A(35)
\   A(95) = Archived FR for right lever, A(2)
\   A(96) = " FR-compensated ITI (FR-comp? 0:NO 1:YES), A(69)
\   A(97) = " Minimum FR-comp ITI (sec), A(15)
\   A(98) = " NON FR-comp ITI value (sec), A(70)
\   A(99) = " NON FR-comp ITI jitter (+-sec), A(71)
\   A(100) = " NON FR-comp ITI jitter intervals, A(72)
\   A(101) = " maximum number of trials, A(17)
\   A(102) = " maximum session length (minutes), A(9)
\   A(103) = " Block element 1 (1=forced -1=choice), F(0)
\   A(104) = " Block element 2 (1=forced -1=choice), F(1)
\   A(105) = " Block element 3 (1=forced -1=choice), F(2)
\   A(106) = " Block element 4 (1=forced -1=choice), F(3)
\   A(107) = " Block element 5 (1=forced -1=choice), F(4)
\   A(108) = " Block element 6 (1=forced -1=choice), F(5)
\   A(109) = " Block element 7 (1=forced -1=choice), F(6)
\   A(110) = " Block element 8 (1=forced -1=choice), F(7)
\   A(111) = " Time-out length after miss (seconds)
\
\   A(300) = Tags state where Z30 was picked up
\
\
\   B = List for reinforcement probabilities for right lever
\   C(1) = Time for tray light
\   C(2) = Countdown for reinforcer number
\   C(3) = Turning ON/OFF ICS at trial start
\   C(4) = FR requirement calculated
\   C(5) = Dummy variable for F subscript
\   C(6) = Lever in forced trial
\   C(7) = Counter for reinforced trials
\   C(8) = Dummy variable for O subscript
\   C(9) = Dummy variable for N subscript start at value chosen from list M
\   C(10) = Chosen list of lever order picks and reinf prob list picks
\   C(11) = Counter for reinforced right trials
\   C(12) = Counter for reinforced left trials
\   C(13) = Variable for delay before reinf delivery time on all trials
\   C(14) = Dummy variable for S subscript start at value chosen from list M
\   C(15) = Counter for resets
\   C(16) = Flag to indicate reinf delivery complete, so can reset
\   D = List for reinforcement probabilities for right lever
\   E = If using non-FR compensated ITIs then E is the list of nonFR-comp ITIs
\   F = list for choice and forced trials
\   G = Event and time stamp counter
\   H = Session timer in centiseconds
\   I = Event identity stamp
\   J = First lever list (1 = right, 2 = left)
\   K = List of lists to pick from for forced lever presentation order and reinf probs
\   L =
\   M = List for start point in list N and for E list position for ITI choice
\   N = Final list for reinforcement probablities for right lever
\   O = Final list of lever picks for forced trials
\   P = Lever list
\   Q = Lever list
\   R = Lever list
\   S = Final list for reinforcement probabilities for left lever
\   T = Time stamp
\   U = List for reinforcement probabilities for left lever
\   V = List for reinforcement probabilities for left lever
\   W = List of positions in forced lever list (O)
\   X =
\   Y = List of High Reward(HR), Low Effort(LE), or Short Delay(SD) choices for criteria
\   Z = List of variable delays between cue light and lever extension if chosen
\
\



VAR_ALIAS Maximum number of trials = A(17)
VAR_ALIAS Maximum session length (minutes) = A(9)
VAR_ALIAS Use Resp 8 to terminate session (0:NO 1:YES) = A(44)
VAR_ALIAS Require HE to initiate trial (0:NO 1:YES) = A(210)
VAR_ALIAS ICS ON/OFF (0:ICS OFF   1:ICS ON) = C(3)
VAR_ALIAS Feeder to use for reward (0=Standard  1=Special) = A(62)
VAR_ALIAS Lever presentation (0=Random 1=All Right 2=All Left) = A(29)
VAR_ALIAS FR for left lever = A(3)
VAR_ALIAS FR for right lever = A(2)
VAR_ALIAS Probabilistic lever (0=None 1=Right 2=Left 3=Both) = A(22)
VAR_ALIAS Reward for left lever (non-probabilistic) = A(5)
VAR_ALIAS Reward for right lever (non-probabilistic) = A(4)
VAR_ALIAS Reward for left lever (PROBABILISTIC "0") = A(26)
VAR_ALIAS Reward for right lever (PROBABILISTIC "0") = A(25)
VAR_ALIAS Reward for left lever (PROBABILISTIC "1") = A(28)
VAR_ALIAS Reward for right lever (PROBABILISTIC "1") = A(27)
VAR_ALIAS Delay to reward on left lever (seconds) = A(7)
VAR_ALIAS Delay to reward on right lever (seconds) = A(6)
VAR_ALIAS Cue lt stay on during delay to reward (0=NO 1=YES) = A(43)
VAR_ALIAS FR-compensated ITI (FR-comp? 0:NO 1:YES) = A(69)
VAR_ALIAS Minimum FR-comp ITI (sec) = A(15)
VAR_ALIAS Maximum FR-comp ITI (sec) = A(14)
VAR_ALIAS NON FR-comp ITI value (sec) = A(70)
VAR_ALIAS NON FR-comp ITI jitter (+-sec) = A(71)
VAR_ALIAS NON FR-comp ITI jitter intervals = A(72)
VAR_ALIAS Time limit to initiate FR (seconds) = A(18)
VAR_ALIAS Time limit to complete the FR (min) = A(24)
VAR_ALIAS Time-out length after miss (seconds) = A(12)
VAR_ALIAS Repeat missed trials (0=Yes  1=No) = A(34)
VAR_ALIAS Criterion for HR/LE/SD choices (0 = OFF  >0 #out of last 12) = A(32)
VAR_ALIAS Use lev choice for criterion intsead? (0:NO  1:RT  2:LT) = A(45)
VAR_ALIAS Number of trials to run after criterion = A(35)
VAR_ALIAS TRIAL BLOCK ELEMENT F1 (1=forced -1=choice) = F(0)
VAR_ALIAS            ELEMENT F2 (1=forced -1=choice) = F(1)
VAR_ALIAS            ELEMENT F3 (1=forced -1=choice) = F(2)
VAR_ALIAS            ELEMENT F4 (1=forced -1=choice) = F(3)
VAR_ALIAS            ELEMENT F5 (1=forced -1=choice) = F(4)
VAR_ALIAS            ELEMENT F6 (1=forced -1=choice) = F(5)
VAR_ALIAS            ELEMENT F7 (1=forced -1=choice) = F(6)
VAR_ALIAS            ELEMENT F8 (1=forced -1=choice) = F(7)
VAR_ALIAS Cue light to lever delay (seconds  -1=VARIABLE) = A(40)
VAR_ALIAS --- CUE TO LEV VARIABLE DELAY TIMES (SEC) --- = A(41)
VAR_ALIAS      DELAY ELEMENT Z1 = Z(0)
VAR_ALIAS      DELAY ELEMENT Z2 = Z(1)
VAR_ALIAS      DELAY ELEMENT Z3 = Z(2)
VAR_ALIAS      DELAY ELEMENT Z4 = Z(3)
VAR_ALIAS      DELAY ELEMENT Z5 = Z(4)
VAR_ALIAS      DELAY ELEMENT Z6 = Z(5)
VAR_ALIAS      DELAY ELEMENT Z7 = Z(6)
VAR_ALIAS ******************************************* = A(46)
VAR_ALIAS **     Session RESET after ending        ** = A(47)
VAR_ALIAS ****************************************** = A(48)
VAR_ALIAS Reset upon ending(0:NO 1:YES) = A(61)
VAR_ALIAS Time to wait before 2nd session(sec) = A(63)
VAR_ALIAS 2ndMaximum number of trials = A(200)
VAR_ALIAS 2ndMaximum session length (minutes) = A(201)
VAR_ALIAS 2ndFR for left lever = A(50)
VAR_ALIAS 2ndFR for right lever = A(49)
VAR_ALIAS 2ndReward for left lever (non-probabilistic) = A(52)
VAR_ALIAS 2ndReward for right lever (non-probabilistic) = A(51)
VAR_ALIAS 2ndReward for left lever (PROBABILISTIC "0") = A(54)
VAR_ALIAS 2ndReward for right lever (PROBABILISTIC "0") = A(53)
VAR_ALIAS 2ndReward for left lever (PROBABILISTIC "1") = A(56)
VAR_ALIAS 2ndReward for right lever (PROBABILISTIC "1") = A(55)
VAR_ALIAS 2ndDelay to reward on left lever (seconds) = A(58)
VAR_ALIAS 2ndDelay to reward on right lever (seconds) = A(57)
VAR_ALIAS 2ndCriterion for lever choices (>0 #out of last 12 choices) = A(60)
VAR_ALIAS 2ndUse lever for choice criterion? (0:NO 1:RT 2:LT) = A(59)
VAR_ALIAS 2ndNumber of trials to run after criterion = A(68)
VAR_ALIAS 2ndCue light to lever delay (seconds  -1=VARIABLE) = A(65)
VAR_ALIAS 2ndFR-compensated ITI (FR-comp? 0:NO 1:YES) = A(76)
VAR_ALIAS 2ndMinimum FR-comp ITI (sec) = A(77)
VAR_ALIAS 2ndMaximum FR-comp ITI (sec) = A(66)
VAR_ALIAS 2ndNON FR-comp ITI value (sec) = A(78)
VAR_ALIAS 2ndNON FR-comp ITI jitter (+-sec) = A(79)
VAR_ALIAS 2ndNON FR-comp ITI jitter intervals = A(80)
VAR_ALIAS 2ndTime-out length after miss (seconds) = A(213)
VAR_ALIAS 2ndSess BLOCK ELEMENT F1 (1=forced -1=choice) = A(202)
VAR_ALIAS     2nd Sess ELEMENT F2 (1=forced -1=choice) = A(203)
VAR_ALIAS     2nd Sess ELEMENT F3 (1=forced -1=choice) = A(204)
VAR_ALIAS     2nd Sess ELEMENT F4 (1=forced -1=choice) = A(205)
VAR_ALIAS     2nd Sess ELEMENT F5 (1=forced -1=choice) = A(206)
VAR_ALIAS     2nd Sess ELEMENT F6 (1=forced -1=choice) = A(207)
VAR_ALIAS     2nd Sess ELEMENT F7 (1=forced -1=choice) = A(208)
VAR_ALIAS     2nd Sess ELEMENT F8 (1=forced -1=choice) = A(209)





Dim A = 300
Dim C = 20
Dim E = 100
Dim I = 20000
Dim N = 99
Dim O = 3
Dim S = 99
Dim T = 20000
Dim Y = 200


List F = 1, 1, 1, 1, -1, -1, -1, -1
List K = 1,2,3,4,1,2,3,4,1,2,3,4,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4
List J = 1, 2, 2, 1
List P = 2, 1, 2, 1
List Q = 2, 2, 1, 1
List R = 2, 1, 1, 2

List B = 1,0,1,0,1,0,1,1,0,0,0,1,0,1,0,1,0,0,1,1,1,0,1,0,1,0,0,1,0,0,0,1,1,1,0,0,1,1,0,1,1,0,1,1,0,0,0,1,1,1,0,1,0,0,0,1,0,1,0,0,0,1,1,0,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,0,0,1,0,1,1,1,0,1,1,1,0,0,1,1,1,0,0,0,1,0
List D = 1,1,1,0,1,1,1,0,1,0,0,1,1,0,0,0,1,0,0,1,1,1,0,1,1,0,0,0,1,0,0,1,1,0,0,1,1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,0,0,1,0,0,1,0,1,1,0,0,0,1,0,1,0,1,0,1,0,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,1,1,0,0,0,1,1,1,0,0,0,1

List U = 1,0,1,0,1,0,1,1,0,0,0,1,0,1,0,1,0,0,1,1,1,0,1,0,1,0,0,1,0,0,0,1,1,1,0,0,1,1,0,1,1,0,1,1,0,0,0,1,1,1,0,1,0,0,0,1,0,1,0,0,0,1,1,0,1,0,0,0,1,0,1,1,1,0,1,0,1,1,0,0,0,1,0,1,1,1,0,1,1,1,0,0,1,1,1,0,0,0,1,0
List V = 1,1,1,0,1,1,1,0,1,0,0,1,1,0,0,0,1,0,0,1,1,1,0,1,1,0,0,0,1,0,0,1,1,0,0,1,1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,0,0,1,0,0,1,0,1,1,0,0,0,1,0,1,0,1,0,1,0,0,0,1,0,0,0,1,1,1,0,1,0,1,1,1,0,1,1,1,0,0,0,1,1,1,0,0,0,1

List M = 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99

List W = 0,1,2,3

List Z = 6, 1, 0, 3, 5, 2, 4



S.S.1,     \Trial timing control and presession pellet delivery
   S1,
     0": ON ^fan, ^whitenoise; SET A(2) = 4, A(3) = 4, A(4) = 1, A(5) = 1, A(6) = 0, A(7) = 0, A(9) = 120;
         SET A(12) = 30, A(14) = 60, A(15) = 30, A(16) = 1, A(17) = 80, A(18) = 10, A(21) = -1, A(24) = 1, A(27) = 1;
         SET A(28) = 1, A(34) = 1, A(40) = 0, A(43) = 1, A(44) = 0, A(63) = 45, A(66) = 60, A(67) = 0, C(3) = 0, C(15) = 0;
         SET A(49) = 1, A(50) = 1, A(51) = 1, A(52) = 1, A(55) = 1, A(56) = 1, A(57) = .01, A(58) = .01, A(64) = ^feeder;
         SET A(69) = 1, A(70) = 45, A(71) = 15, A(72) = 1, A(76) = A(69), A(77) = A(15), A(66) = A(14), A(78) = A(70);
         SET A(79) = A(71), A(80) = A(72), A(200) = 80, A(201) = 120, A(202) = 1, A(203) = 1, A(204) = 1, A(205) = 1;
         SET A(206) = -1, A(207) = -1, A(208) = -1, A(209) = -1, A(210) = 1, A(213) = 45 ---> S2
   S2,
     #START: IF A(210) > 0 [@REQHE, @NOREQHE]
                  @REQHE: SET A(211) = 32; OFF ^whitenoise; SHOW 1+A(67), "Trial # : ", A(16); SHOW 2+A(67), "Reinforced trials: ", C(7);
                          Z1; ZA(211); Z21;
                          IF A(35)>0 [@OVERRUN, @NOOVERRUN]
                          @OVERRUN: SET A(36) = 1, A(37) = A(35)+1 ---> S3
                          @NOOVERRUN: SET A(36) = 0 ---> S3
                  @NOREQHE: SET A(211) = 3; OFF ^whitenoise; SHOW 1+A(67), "Trial # : ", A(16); SHOW 2+A(67), "Reinforced trials: ", C(7);
                            Z1; ZA(211); Z21;
                            IF A(35)>0 [@OVERRUN, @NOOVERRUN]
                            @OVERRUN: SET A(36) = 1, A(37) = A(35)+1 ---> S3
                            @NOOVERRUN: SET A(36) = 0 ---> S3
     #R6: ON A(64); Z19 ---> S7
     #Z30: SET A(1) = 0, A(2) = A(49), A(3) = A(50), A(4) = A(51), A(5) = A(52), A(6) = A(57), A(7) = A(58), A(8) = 0, A(9) = A(201);
           SET A(10) = 0, A(11) = 0, A(12) = A(213), A(13) = 0, A(14) = A(66), A(15) = A(77), A(16) = 1, A(17) = A(200), A(18) = 10, A(19) = 0;
           SET A(20) = 0, A(21) = -1, A(22) = 0, A(23) = 0, A(24) = 1, A(25) = A(53), A(26) = A(54), A(27) = A(55), A(28) = A(56);
           SET A(29) = 0, A(30) = 0, A(31) = 0, A(32) = A(60), A(33) = 0, A(34) = 1, A(35) = A(68), A(36) = 0, A(37) = 0, A(38) = 0;
           SET A(39) = 0, A(40) = A(65), A(41) = 0, A(42) = 0, A(43) = 1, A(44) = 1, A(45) = A(59), A(46) = 0, A(47) = 0, A(48) = 0, A(61) = 0;
           SET A(67) = 20, A(69) = A(76), A(70) = A(78), A(71) = A(79), A(72) = A(80);
           SET C(2) = 0, C(3) = 0, C(4) = 0, C(5) = 0, C(6) = 0, C(7) = 0, C(8) = 0, C(9) = 0, C(10) = 0, C(11) = 0;
           SET C(12) = 0, C(13) = 0, C(14) = 0;
           SET F(0) = A(202), F(1) = A(203), F(2) = A(204), F(3) = A(205), F(4) = A(206), F(5) = A(207), F(6) = A(208), F(7) = A(209);
           IF A(210) > 0 [@REQHE, @NOREQHE]
           @REQHE: SET A(211) = 32; OFF ^whitenoise; SHOW 1+A(67), "Trial # : ", A(16); SHOW 2+A(67), "Reinforced trials: ", C(7);
                   Z1; ZA(211); Z21;
                   IF A(35)>0 [@OVERRUN, @NOOVERRUN]
                   @OVERRUN: SET A(36) = 1, A(37) = A(35)+1 ---> S3
                   @NOOVERRUN: SET A(36) = 0 ---> S3
           @NOREQHE: SET A(211) = 3; OFF ^whitenoise; SHOW 1+A(67), "Trial # : ", A(16); SHOW 2+A(67), "Reinforced trials: ", C(7);
                     Z1; ZA(211); Z21;
                     IF A(35)>0 [@OVERRUN, @NOOVERRUN]
                     @OVERRUN: SET A(36) = 1, A(37) = A(35)+1 ---> S3
                     @NOOVERRUN: SET A(36) = 0 ---> S3
   S3,
     #Z2: ADD A(16) ---> S4
     #Z30: SET A(1) = 0, A(2) = A(49), A(3) = A(50), A(4) = A(51), A(5) = A(52), A(6) = A(57), A(7) = A(58), A(8) = 0, A(9) = A(201);
           SET A(10) = 0, A(11) = 0, A(12) = A(213), A(13) = 0, A(14) = A(66), A(15) = A(77), A(16) = 1, A(17) = A(200), A(18) = 10, A(19) = 0;
           SET A(20) = 0, A(21) = -1, A(22) = 0, A(23) = 0, A(24) = 1, A(25) = A(53), A(26) = A(54), A(27) = A(55), A(28) = A(56);
           SET A(29) = 0, A(30) = 0, A(31) = 0, A(32) = A(60), A(33) = 0, A(34) = 1, A(35) = A(68), A(36) = 0, A(37) = 0, A(38) = 0;
           SET A(39) = 0, A(40) = A(65), A(41) = 0, A(42) = 0, A(43) = 1, A(44) = 1, A(45) = A(59), A(46) = 0, A(47) = 0, A(48) = 0, A(61) = 0;
           SET A(67) = 20, A(69) = A(76), A(70) = A(78), A(71) = A(79), A(72) = A(80);
           SET C(2) = 0, C(3) = 0, C(4) = 0, C(5) = 0, C(6) = 0, C(7) = 0, C(8) = 0, C(9) = 0, C(10) = 0, C(11) = 0;
           SET C(12) = 0, C(13) = 0, C(14) = 0;
           SET F(0) = A(202), F(1) = A(203), F(2) = A(204), F(3) = A(205), F(4) = A(206), F(5) = A(207), F(6) = A(208), F(7) = A(209);
           IF A(210) > 0 [@REQHE, @NOREQHE]
           @REQHE: SET A(211) = 32; OFF ^whitenoise; SHOW 1+A(67), "Trial # : ", A(16); SHOW 2+A(67), "Reinforced trials: ", C(7);
                   Z1; ZA(211); Z21;
                   IF A(35)>0 [@OVERRUN, @NOOVERRUN]
                   @OVERRUN: SET A(36) = 1, A(37) = A(35)+1 ---> S3
                   @NOOVERRUN: SET A(36) = 0 ---> S3
           @NOREQHE: SET A(211) = 3; OFF ^whitenoise; SHOW 1+A(67), "Trial # : ", A(16); SHOW 2+A(67), "Reinforced trials: ", C(7);
                     Z1; ZA(211); Z21;
                     IF A(35)>0 [@OVERRUN, @NOOVERRUN]
                     @OVERRUN: SET A(36) = 1, A(37) = A(35)+1 ---> S3
                     @NOOVERRUN: SET A(36) = 0 ---> S3
   S4,
     #Z7!#Z8: IF A(69) = 0 [@NONFRCOMPITI, @FRCOMPITI]
              @NONFRCOMPITI: ---> S8
              @FRCOMPITI: SET A(1) = (A(14) - A(11)) + (C(1)/100); SET A(11) = 0; IF A(1) <= (A(15)+(C(1)/100)) [@frtoolong, @frnottoolong]
                           @frtoolong: SET A(1) = A(15)+(C(1)/100) ---> S5
                           @frnottoolong: ---> S5
              \ C(1) is the time left for the traylight to be on once all pellets have been delivered (in centiseconds). It is given
              \  by 6 seconds(total traylight time) minus the time for pellet delivery (~100msec for each pellet). ITI starts after pellets are delivered, so
              \  you must add this traylight time into the ITI.

     #Z30: SET A(1) = 0, A(2) = A(49), A(3) = A(50), A(4) = A(51), A(5) = A(52), A(6) = A(57), A(7) = A(58), A(8) = 0, A(9) = A(201);
           SET A(10) = 0, A(11) = 0, A(12) = A(213), A(13) = 0, A(14) = A(66), A(15) = A(77), A(16) = 1, A(17) = A(200), A(18) = 10, A(19) = 0;
           SET A(20) = 0, A(21) = -1, A(22) = 0, A(23) = 0, A(24) = 1, A(25) = A(53), A(26) = A(54), A(27) = A(55), A(28) = A(56);
           SET A(29) = 0, A(30) = 0, A(31) = 0, A(32) = A(60), A(33) = 0, A(34) = 1, A(35) = A(68), A(36) = 0, A(37) = 0, A(38) = 0;
           SET A(39) = 0, A(40) = A(65), A(41) = 0, A(42) = 0, A(43) = 1, A(44) = 1, A(45) = A(59), A(46) = 0, A(47) = 0, A(48) = 0, A(61) = 0;
           SET A(67) = 20, A(69) = A(76), A(70) = A(78), A(71) = A(79), A(72) = A(80);
           SET C(2) = 0, C(3) = 0, C(4) = 0, C(5) = 0, C(6) = 0, C(7) = 0, C(8) = 0, C(9) = 0, C(10) = 0, C(11) = 0;
           SET C(12) = 0, C(13) = 0, C(14) = 0;
           SET F(0) = A(202), F(1) = A(203), F(2) = A(204), F(3) = A(205), F(4) = A(206), F(5) = A(207), F(6) = A(208), F(7) = A(209);
           IF A(210) > 0 [@REQHE, @NOREQHE]
           @REQHE: SET A(211) = 32; OFF ^whitenoise; SHOW 1+A(67), "Trial # : ", A(16); SHOW 2+A(67), "Reinforced trials: ", C(7);
                   Z1; ZA(211); Z21;
                   IF A(35)>0 [@OVERRUN, @NOOVERRUN]
                   @OVERRUN: SET A(36) = 1, A(37) = A(35)+1 ---> S3
                   @NOOVERRUN: SET A(36) = 0 ---> S3
           @NOREQHE: SET A(211) = 3; OFF ^whitenoise; SHOW 1+A(67), "Trial # : ", A(16); SHOW 2+A(67), "Reinforced trials: ", C(7);
                     Z1; ZA(211); Z21;
                     IF A(35)>0 [@OVERRUN, @NOOVERRUN]
                     @OVERRUN: SET A(36) = 1, A(37) = A(35)+1 ---> S3
                     @NOOVERRUN: SET A(36) = 0 ---> S3
   S5,
     100*A(1)#T: IF (H >= (A(9) * 6000)) OR (A(16) > A(17)) OR ( (A(31)>=A(32)) AND (A(32)>0) AND (A(36)<>1) ) [@END, @NOTEND]
             @END: IF ((A(36)<>1) AND (A(61)>0)) OR ((A(31)>=A(32)) AND (A(32)>0) AND (A(61)>0)) [@RESET, @END]
                   @RESET: ---> S6
                   @END:   ADD G; SET T(G) = H, I(G) = 16, T(G+1) = -987.987, I(G+1) = -987.987; Z21 ---> S6
             @NOTEND: ADD G; SET T(G) = H, I(G) = 16, T(G+1) = -987.987, I(G+1) = -987.987; Z1; Z21; ZA(211); SHOW 1+A(67), "Trial #: ", A(16) ---> S3
     #Z30: SET A(1) = 0, A(2) = A(49), A(3) = A(50), A(4) = A(51), A(5) = A(52), A(6) = A(57), A(7) = A(58), A(8) = 0, A(9) = A(201);
           SET A(10) = 0, A(11) = 0, A(12) = A(213), A(13) = 0, A(14) = A(66), A(15) = A(77), A(16) = 1, A(17) = A(200), A(18) = 10, A(19) = 0;
           SET A(20) = 0, A(21) = -1, A(22) = 0, A(23) = 0, A(24) = 1, A(25) = A(53), A(26) = A(54), A(27) = A(55), A(28) = A(56);
           SET A(29) = 0, A(30) = 0, A(31) = 0, A(32) = A(60), A(33) = 0, A(34) = 1, A(35) = A(68), A(36) = 0, A(37) = 0, A(38) = 0;
           SET A(39) = 0, A(40) = A(65), A(41) = 0, A(42) = 0, A(43) = 1, A(44) = 1, A(45) = A(59), A(46) = 0, A(47) = 0, A(48) = 0, A(61) = 0;
           SET A(67) = 20, A(69) = A(76), A(70) = A(78), A(71) = A(79), A(72) = A(80);
           SET C(2) = 0, C(3) = 0, C(4) = 0, C(5) = 0, C(6) = 0, C(7) = 0, C(8) = 0, C(9) = 0, C(10) = 0, C(11) = 0;
           SET C(12) = 0, C(13) = 0, C(14) = 0;
           SET F(0) = A(202), F(1) = A(203), F(2) = A(204), F(3) = A(205), F(4) = A(206), F(5) = A(207), F(6) = A(208), F(7) = A(209);
           IF A(210) > 0 [@REQHE, @NOREQHE]
           @REQHE: SET A(211) = 32; OFF ^whitenoise; SHOW 1+A(67), "Trial # : ", A(16); SHOW 2+A(67), "Reinforced trials: ", C(7);
                   Z1; ZA(211); Z21;
                   IF A(35)>0 [@OVERRUN, @NOOVERRUN]
                   @OVERRUN: SET A(36) = 1, A(37) = A(35)+1 ---> S3
                   @NOOVERRUN: SET A(36) = 0 ---> S3
           @NOREQHE: SET A(211) = 3; OFF ^whitenoise; SHOW 1+A(67), "Trial # : ", A(16); SHOW 2+A(67), "Reinforced trials: ", C(7);
                     Z1; ZA(211); Z21;
                     IF A(35)>0 [@OVERRUN, @NOOVERRUN]
                     @OVERRUN: SET A(36) = 1, A(37) = A(35)+1 ---> S3
                     @NOOVERRUN: SET A(36) = 0 ---> S3
   S6,
     #Z30: SET A(1) = 0, A(2) = A(49), A(3) = A(50), A(4) = A(51), A(5) = A(52), A(6) = A(57), A(7) = A(58), A(8) = 0, A(9) = A(201);
           SET A(10) = 0, A(11) = 0, A(12) = A(213), A(13) = 0, A(14) = A(66), A(15) = A(77), A(16) = 1, A(17) = A(200), A(18) = 10, A(19) = 0;
           SET A(20) = 0, A(21) = -1, A(22) = 0, A(23) = 0, A(24) = 1, A(25) = A(53), A(26) = A(54), A(27) = A(55), A(28) = A(56);
           SET A(29) = 0, A(30) = 0, A(31) = 0, A(32) = A(60), A(33) = 0, A(34) = 1, A(35) = A(68), A(36) = 0, A(37) = 0, A(38) = 0;
           SET A(39) = 0, A(40) = A(65), A(41) = 0, A(42) = 0, A(43) = 1, A(44) = 1, A(45) = A(59), A(46) = 0, A(47) = 0, A(48) = 0, A(61) = 0;
           SET A(67) = 20, A(69) = A(76), A(70) = A(78), A(71) = A(79), A(72) = A(80);
           SET C(2) = 0, C(3) = 0, C(4) = 0, C(5) = 0, C(6) = 0, C(7) = 0, C(8) = 0, C(9) = 0, C(10) = 0, C(11) = 0;
           SET C(12) = 0, C(13) = 0, C(14) = 0;
           SET F(0) = A(202), F(1) = A(203), F(2) = A(204), F(3) = A(205), F(4) = A(206), F(5) = A(207), F(6) = A(208), F(7) = A(209);
           IF A(210) > 0 [@REQHE, @NOREQHE]
           @REQHE: SET A(211) = 32; OFF ^whitenoise; SHOW 1+A(67), "Trial # : ", A(16); SHOW 2+A(67), "Reinforced trials: ", C(7);
                   Z1; ZA(211); Z21;
                   IF A(35)>0 [@OVERRUN, @NOOVERRUN]
                   @OVERRUN: SET A(36) = 1, A(37) = A(35)+1 ---> S3
                   @NOOVERRUN: SET A(36) = 0 ---> S3
           @NOREQHE: SET A(211) = 3; OFF ^whitenoise; SHOW 1+A(67), "Trial # : ", A(16); SHOW 2+A(67), "Reinforced trials: ", C(7);
                     Z1; ZA(211); Z21;
                     IF A(35)>0 [@OVERRUN, @NOOVERRUN]
                     @OVERRUN: SET A(36) = 1, A(37) = A(35)+1 ---> S3
                     @NOOVERRUN: SET A(36) = 0 ---> S3
   S7,
     0.05": OFF A(64) ---> S2
     #Z30: SET A(1) = 0, A(2) = A(49), A(3) = A(50), A(4) = A(51), A(5) = A(52), A(6) = A(57), A(7) = A(58), A(8) = 0, A(9) = A(201);
           SET A(10) = 0, A(11) = 0, A(12) = A(213), A(13) = 0, A(14) = A(66), A(15) = A(77), A(16) = 1, A(17) = A(200), A(18) = 10, A(19) = 0;
           SET A(20) = 0, A(21) = -1, A(22) = 0, A(23) = 0, A(24) = 1, A(25) = A(53), A(26) = A(54), A(27) = A(55), A(28) = A(56);
           SET A(29) = 0, A(30) = 0, A(31) = 0, A(32) = A(60), A(33) = 0, A(34) = 1, A(35) = A(68), A(36) = 0, A(37) = 0, A(38) = 0;
           SET A(39) = 0, A(40) = A(65), A(41) = 0, A(42) = 0, A(43) = 1, A(44) = 1, A(45) = A(59), A(46) = 0, A(47) = 0, A(48) = 0, A(61) = 0;
           SET A(67) = 20, A(69) = A(76), A(70) = A(78), A(71) = A(79), A(72) = A(80);
           SET C(2) = 0, C(3) = 0, C(4) = 0, C(5) = 0, C(6) = 0, C(7) = 0, C(8) = 0, C(9) = 0, C(10) = 0, C(11) = 0;
           SET C(12) = 0, C(13) = 0, C(14) = 0;
           SET F(0) = A(202), F(1) = A(203), F(2) = A(204), F(3) = A(205), F(4) = A(206), F(5) = A(207), F(6) = A(208), F(7) = A(209);
           IF A(210) > 0 [@REQHE, @NOREQHE]
           @REQHE: SET A(211) = 32; OFF ^whitenoise; SHOW 1+A(67), "Trial # : ", A(16); SHOW 2+A(67), "Reinforced trials: ", C(7);
                   Z1; ZA(211); Z21;
                   IF A(35)>0 [@OVERRUN, @NOOVERRUN]
                   @OVERRUN: SET A(36) = 1, A(37) = A(35)+1 ---> S3
                   @NOOVERRUN: SET A(36) = 0 ---> S3
           @NOREQHE: SET A(211) = 3; OFF ^whitenoise; SHOW 1+A(67), "Trial # : ", A(16); SHOW 2+A(67), "Reinforced trials: ", C(7);
                     Z1; ZA(211); Z21;
                     IF A(35)>0 [@OVERRUN, @NOOVERRUN]
                     @OVERRUN: SET A(36) = 1, A(37) = A(35)+1 ---> S3
                     @NOOVERRUN: SET A(36) = 0 ---> S3
   S8,
     #Z30: SET A(1) = 0, A(2) = A(49), A(3) = A(50), A(4) = A(51), A(5) = A(52), A(6) = A(57), A(7) = A(58), A(8) = 0, A(9) = A(201);
           SET A(10) = 0, A(11) = 0, A(12) = A(213), A(13) = 0, A(14) = A(66), A(15) = A(77), A(16) = 1, A(17) = A(200), A(18) = 10, A(19) = 0;
           SET A(20) = 0, A(21) = -1, A(22) = 0, A(23) = 0, A(24) = 1, A(25) = A(53), A(26) = A(54), A(27) = A(55), A(28) = A(56);
           SET A(29) = 0, A(30) = 0, A(31) = 0, A(32) = A(60), A(33) = 0, A(34) = 1, A(35) = A(68), A(36) = 0, A(37) = 0, A(38) = 0;
           SET A(39) = 0, A(40) = A(65), A(41) = 0, A(42) = 0, A(43) = 1, A(44) = 1, A(45) = A(59), A(46) = 0, A(47) = 0, A(48) = 0, A(61) = 0;
           SET A(67) = 20, A(69) = A(76), A(70) = A(78), A(71) = A(79), A(72) = A(80);
           SET C(2) = 0, C(3) = 0, C(4) = 0, C(5) = 0, C(6) = 0, C(7) = 0, C(8) = 0, C(9) = 0, C(10) = 0, C(11) = 0;
           SET C(12) = 0, C(13) = 0, C(14) = 0;
           SET F(0) = A(202), F(1) = A(203), F(2) = A(204), F(3) = A(205), F(4) = A(206), F(5) = A(207), F(6) = A(208), F(7) = A(209);
           IF A(210) > 0 [@REQHE, @NOREQHE]
           @REQHE: SET A(211) = 32; OFF ^whitenoise; SHOW 1+A(67), "Trial # : ", A(16); SHOW 2+A(67), "Reinforced trials: ", C(7);
                   Z1; ZA(211); Z21;
                   IF A(35)>0 [@OVERRUN, @NOOVERRUN]
                   @OVERRUN: SET A(36) = 1, A(37) = A(35)+1 ---> S3
                   @NOOVERRUN: SET A(36) = 0 ---> S3
           @NOREQHE: SET A(211) = 3; OFF ^whitenoise; SHOW 1+A(67), "Trial # : ", A(16); SHOW 2+A(67), "Reinforced trials: ", C(7);
                     Z1; ZA(211); Z21;
                     IF A(35)>0 [@OVERRUN, @NOOVERRUN]
                     @OVERRUN: SET A(36) = 1, A(37) = A(35)+1 ---> S3
                     @NOOVERRUN: SET A(36) = 0 ---> S3
     0": RANDD A(75) = M; SET A(1) = E(A(75)); IF A(1) = 0 [@RESET, @NORESET]
          @RESET: ---> S8
          @NORESET: SET A(1) = A(1) + (C(1)/100) ---> S5






S.S.2,    \Lever responses
   S1,
     #Z5: ---> S6
     #Z4: IF A(10) = 1 [@forced, @choice]
          @forced: ---> S8
          @choice: IF A(8) = 1 [@CHOICERIGHT, @CHOICELEFT]
                   @CHOICERIGHT: ---> S4
                   @CHOICELEFT: ---> S5
   S2,
     1#R^rightleverin: ADD G; SET T(G) = H, I(G) = 17, T(G+1) = -987.987, I(G+1) = -987.987; Z13; Z15 ---> S4
     100*(A(18))#T: ADD G; SET T(G) = H, I(G) = 19, T(G+1) = -987.987, I(G+1) = -987.987; Z5; Z31 ---> S6
     #Z5: ---> S6
     #Z29: ---> S1
   S3,
     1#R^leftleverin: ADD G; SET T(G) = H, I(G) = 18, T(G+1) = -987.987, I(G+1) = -987.987; Z14; Z15 ---> S5
     100*(A(18))#T: ADD G; SET T(G) = H, I(G) = 20, T(G+1) = -987.987, I(G+1) = -987.987; Z5; Z31 ---> S6
     #Z5: ---> S6
     #Z29: ---> S1
   S4,
     1#R^rightleverin: ADD G; SET T(G) = H, I(G) = 1, T(G+1) = -987.987, I(G+1) = -987.987; Z15 ---> SX
     #Z2: ---> S1
     #Z5: ---> S6
     #Z29: ---> S1
   S5,
     1#R^leftleverin: ADD G; SET T(G) = H, I(G) = 2, T(G+1) = -987.987, I(G+1) = -987.987; Z15 ---> SX
     #Z2: ---> S1
     #Z5: ---> S6
     #Z29: ---> S1
   S6,
     #Z6: IF (H >= (A(9) * 6000)) OR (A(16) > A(17)) OR ( (A(31)>=A(32)) AND (A(32)>0) AND (A(36)<>1) ) [@END, @NOTEND]
          @END: IF ((A(36)<>1) AND (A(61)>0)) OR ((A(31)>=A(32)) AND (A(32)>0) AND (A(61)>0)) [@RESET, @END]
                @RESET: ---> S1
                @END:   ---> S7
          @NOTEND: ---> S1
     #Z29: ---> S1
   S7,
     #Z29: ---> S1
   S8,
     #Z24!#Z25: IF A(8) = 1 [@right, @left]
                @right: ---> S2
                @left: ---> S3
     #Z5: ---> S6
     #Z29: ---> S1




S.S.3,     \Completed FR
   S1,
     #Z5: ---> S4
     #Z4: IF A(10) = 1 [@force, @choice]
          @force: ---> s6
          @choice: IF A(8) = 1 [@CHOICERIGHT, @CHOICELEFT]
                   @CHOICERIGHT: IF A(2) = 1 [@frdone, @frnotdone]
                                 @frdone: ADD G; SET T(G) = H, I(G) = 3, T(G+1) = -987.987, I(G+1) = -987.987; Z2; ADD A(19); SHOW 3+A(67), "Completed right FRs: ", A(19) ---> SX
                                 @frnotdone: SET C(4) = A(2) - 1 ---> S2
                   @CHOICELEFT: IF A(3) = 1 [@frdone, @frnotdone]
                                @frdone: ADD G; SET T(G) = H, I(G) = 4, T(G+1) = -987.987, I(G+1) = -987.987; Z2; ADD A(20); SHOW 4+A(67), "Completed left FRs: ", A(20) ---> SX
                                @frnotdone: SET C(4) = A(3) - 1 ---> S3
   S2,
     C(4)#R^rightleverin: ADD G; SET T(G) = H, I(G) = 3, T(G+1) = -987.987, I(G+1) = -987.987; IF (A(10) = 1) AND (A(2) = 1) [@Nofrtime, @Somefrtime]
              @nofrtime: IF S.S.2 = 6 [@MISSINSS2, @NOMISSINSS2]
                                     @MISSINSS2: ---> S4
                                     @NOMISSINSS2: SET A(11) = 0; Z2; ADD A(19); SHOW 3+A(67), "Completed right FRs: ", A(19) ---> S1
              @somefrtime: IF S.S.2 = 6 [@MISSINSS2, @NOMISSINSS2]
                                       @MISSINSS2: ---> S4
                                       @NOMISSINSS2: Z2; ADD A(19); SHOW 3+A(67), "Completed right FRs: ", A(19) ---> S1
     1": IF (S.S.2 = 4) AND (S.S.4 < 5) [ADD A(11)] ---> SX
     #Z5: ---> S4
     #Z29: ---> S1
   S3,
     C(4)#R^leftleverin: ADD G; SET T(G) = H, I(G) = 4, T(G+1) = -987.987, I(G+1) = -987.987; IF (A(10) = 1) AND (A(3) = 1) [@Nofrtime, @Somefrtime]
             @nofrtime: IF S.S.2 = 6 [@MISSINSS2, @NOMISSINSS2]
                                    @MISSINSS2: ---> S4
                                    @NOMISSINSS2: SET A(11) = 0; Z2; ADD A(20); SHOW 4+A(67), "Completed left FRs: ", A(20) ---> S1
             @somefrtime: IF S.S.2 = 6 [@MISSINSS2, @NOMISSINSS2]
                                      @MISSINSS2: ---> S4
                                      @NOMISSINSS2: Z2; ADD A(20); SHOW 4+A(67), "Completed left FRs: ", A(20) ---> S1
     1": IF (S.S.2 = 5) AND (S.S.4 < 5) [ADD A(11)] ---> SX
     #Z5: ---> S4
     #Z29: ---> S1
   S4,
     #Z6: IF (H >= (A(9) * 6000)) OR (A(16) > A(17)) OR ( (A(31)>=A(32)) AND (A(32)>0) AND (A(36)<>1) ) [@END, @NOTEND]
          @END: IF ((A(36)<>1) AND (A(61)>0)) OR ((A(31)>=A(32)) AND (A(32)>0) AND (A(61)>0)) [@RESET, @END]
                @RESET: ---> S1
                @END:   ---> S5
          @NOTEND: ---> S1
     #Z29: ---> S1
   S5,
     #START: ---> SX
   S6,
     #Z24!#Z25: IF A(8) = 1 [@FORCEDright, @FORCEDleft]
                @FORCEDright: SET C(4) = A(2) ---> S2
                @FORCEDleft: SET C(4) = A(3) ---> S3
     #Z5: ---> S4
     #Z29: ---> S1




S.S.4,    \Levers retract or extend
   S1,
     #Z23: IF A(42)>0 [@DELAY, @NODELAY]
           @DELAY: ---> S5
           @NODELAY: ON ^rightlever; ON ^leftlever; Z24; Z25;
                     ADD G; SET T(G) = H, I(G) = 36, T(G+1) = -987.987, I(G+1) = -987.987;
                     ADD G; SET T(G) = H, I(G) = 37, T(G+1) = -987.987, I(G+1) = -987.987 ---> SX
     #Z4: IF A(8) = 1 [@right, @left]
          @right: IF A(10)<>1 [@CHOICERIGHT, @FORCEDRIGHT]
                  @CHOICERIGHT: OFF ^leftlever; ADD G; SET T(G) = H, I(G) = 39, T(G+1) = -987.987, I(G+1) = -987.987 ---> S2
                  @FORCEDRIGHT: IF A(42)>0 [@DELAY, @NODELAY]
                                @DELAY: ---> S6
                                @NODELAY: ON ^rightlever; OFF ^leftlever; Z11; Z24;
                                          ADD G; SET T(G) = H, I(G) = 36, T(G+1) = -987.987, I(G+1) = -987.987;
                                          ADD G; SET T(G) = H, I(G) = 39, T(G+1) = -987.987, I(G+1) = -987.987 ---> S2
          @left: IF A(10)<>1 [@CHOICELEFT, @FORCEDLEFT]
                 @CHOICELEFT: OFF ^rightlever; ADD G; SET T(G) = H, I(G) = 38, T(G+1) = -987.987, I(G+1) = -987.987 ---> S2
                 @FORCEDLEFT: IF A(42)>0 [@DELAY, @NODELAY]
                              @DELAY: ---> S7
                              @NODELAY: ON ^leftlever; OFF ^rightlever; Z12; Z25;
                                        ADD G; SET T(G) = H, I(G) = 37, T(G+1) = -987.987, I(G+1) = -987.987;
                                        ADD G; SET T(G) = H, I(G) = 38, T(G+1) = -987.987, I(G+1) = -987.987 ---> S2
     #Z5: OFF ^rightlever; OFF ^leftlever;
          ADD G; SET T(G) = H, I(G) = 38, T(G+1) = -987.987, I(G+1) = -987.987;
          ADD G; SET T(G) = H, I(G) = 39, T(G+1) = -987.987, I(G+1) = -987.987 ---> S3
   S2,
     #Z2: OFF ^rightlever; OFF ^leftlever;
          ADD G; SET T(G) = H, I(G) = 38, T(G+1) = -987.987, I(G+1) = -987.987;
          ADD G; SET T(G) = H, I(G) = 39, T(G+1) = -987.987, I(G+1) = -987.987 ---> S1
     #Z5: OFF ^rightlever; OFF ^leftlever;
          ADD G; SET T(G) = H, I(G) = 38, T(G+1) = -987.987, I(G+1) = -987.987;
          ADD G; SET T(G) = H, I(G) = 39, T(G+1) = -987.987, I(G+1) = -987.987 ---> S3
     #Z29: OFF ^rightlever; OFF ^leftlever;
           ADD G; SET T(G) = H, I(G) = 38, T(G+1) = -987.987, I(G+1) = -987.987;
           ADD G; SET T(G) = H, I(G) = 39, T(G+1) = -987.987, I(G+1) = -987.987 ---> S1
   S3,
     #Z6: IF (H >= (A(9) * 6000)) OR (A(16) > A(17)) OR ( (A(31)>=A(32)) AND (A(32)>0) AND (A(36)<>1) ) [@END, @NOTEND]
          @END: IF ((A(36)<>1) AND (A(61)>0)) OR ((A(31)>=A(32)) AND (A(32)>0) AND (A(61)>0)) [@RESET, @END]
                @RESET: OFF ^rightlever; OFF ^leftlever;
                        ADD G; SET T(G) = H, I(G) = 38, T(G+1) = -987.987, I(G+1) = -987.987;
                        ADD G; SET T(G) = H, I(G) = 39, T(G+1) = -987.987, I(G+1) = -987.987 ---> S1
                @END:   ---> S4
          @NOTEND: ---> S1
     #Z29: OFF ^rightlever; OFF ^leftlever;
           ADD G; SET T(G) = H, I(G) = 38, T(G+1) = -987.987, I(G+1) = -987.987;
           ADD G; SET T(G) = H, I(G) = 39, T(G+1) = -987.987, I(G+1) = -987.987 ---> S1
   S4,
     #START: ---> SX
     #Z29: OFF ^rightlever; OFF ^leftlever;
           ADD G; SET T(G) = H, I(G) = 38, T(G+1) = -987.987, I(G+1) = -987.987;
           ADD G; SET T(G) = H, I(G) = 39, T(G+1) = -987.987, I(G+1) = -987.987 ---> S1
   S5,
     100*A(42)#T: ON ^rightlever; ON ^leftlever; Z24; Z25;
                  ADD G; SET T(G) = H, I(G) = 36, T(G+1) = -987.987, I(G+1) = -987.987;
                  ADD G; SET T(G) = H, I(G) = 37, T(G+1) = -987.987, I(G+1) = -987.987 ---> S1
     #Z5: OFF ^rightlever; OFF ^leftlever;
          ADD G; SET T(G) = H, I(G) = 38, T(G+1) = -987.987, I(G+1) = -987.987;
          ADD G; SET T(G) = H, I(G) = 39, T(G+1) = -987.987, I(G+1) = -987.987 ---> S3
     #Z29: OFF ^rightlever; OFF ^leftlever;
           ADD G; SET T(G) = H, I(G) = 38, T(G+1) = -987.987, I(G+1) = -987.987;
           ADD G; SET T(G) = H, I(G) = 39, T(G+1) = -987.987, I(G+1) = -987.987 ---> S1
   S6,
     100*A(42)#T: ON ^rightlever; OFF ^leftlever; Z11; Z24;
                  ADD G; SET T(G) = H, I(G) = 36, T(G+1) = -987.987, I(G+1) = -987.987;
                  ADD G; SET T(G) = H, I(G) = 39, T(G+1) = -987.987, I(G+1) = -987.987 ---> S2
     #Z5: OFF ^rightlever; OFF ^leftlever;
          ADD G; SET T(G) = H, I(G) = 38, T(G+1) = -987.987, I(G+1) = -987.987;
          ADD G; SET T(G) = H, I(G) = 39, T(G+1) = -987.987, I(G+1) = -987.987 ---> S3
     #Z29: OFF ^rightlever; OFF ^leftlever;
           ADD G; SET T(G) = H, I(G) = 38, T(G+1) = -987.987, I(G+1) = -987.987;
           ADD G; SET T(G) = H, I(G) = 39, T(G+1) = -987.987, I(G+1) = -987.987 ---> S1
   S7,
     100*A(42)#T: ON ^leftlever; OFF ^rightlever; Z12; Z25;
                  ADD G; SET T(G) = H, I(G) = 37, T(G+1) = -987.987, I(G+1) = -987.987;
                  ADD G; SET T(G) = H, I(G) = 38, T(G+1) = -987.987, I(G+1) = -987.987 ---> S2
     #Z5: OFF ^rightlever; OFF ^leftlever;
          ADD G; SET T(G) = H, I(G) = 38, T(G+1) = -987.987, I(G+1) = -987.987;
          ADD G; SET T(G) = H, I(G) = 39, T(G+1) = -987.987, I(G+1) = -987.987 ---> S3
     #Z29: OFF ^rightlever; OFF ^leftlever;
           ADD G; SET T(G) = H, I(G) = 38, T(G+1) = -987.987, I(G+1) = -987.987;
           ADD G; SET T(G) = H, I(G) = 39, T(G+1) = -987.987, I(G+1) = -987.987 ---> S1




S.S.5,   \Insures traylight and houselight are switched off when ended; chooses delay between cue lt and lev extension
   S1,
     #Z5!#Z29: IF C(16) <> 1 [@ALLOFF, @WAIT]
                @ALLOFF: OFF ^houselt, ^traylt ---> SX
                @WAIT: ---> S2
     #START!#Z1: IF A(40) = -1 [@VAR,@NOVAR]
                 @VAR: RANDD A(42) = Z ---> SX
                 @NOVAR: IF A(40) >= 0 [@VALID, @NOTVALID]
                         @VALID: SET A(42) = A(40) ---> SX
                         @NOTVALID: SET A(42) = 0 ---> SX
   S2,
     0": IF C(16) <> 1 [@ALLOFF, @WAIT]
          @ALLOFF: OFF ^houselt, ^traylt ---> S1
          @WAIT: ---> SX




S.S.6,   \Lever Choice
   S1,
     #Z3: LIST A(10) = F(C(5)); IF A(10) = 1 [@forced, @choice]
                       @forced: IF A(29) = 0 [@RANDOM, @NOTRANDOM]
                                @RANDOM: RANDD C(8) = W; SET C(6) = O(C(8)); IF C(6) = 1 [@right, @left]
                                                 @right: SET A(8) = 1; ADD G; SET T(G) = H, I(G) = 21, T(G+1) = -987.987, I(G+1) = -987.987; Z4 ---> SX
                                                 @left: SET A(8) = 2; ADD G; SET T(G) = H, I(G) = 22, T(G+1) = -987.987, I(G+1) = -987.987; Z4 ---> SX
                                @NOTRANDOM: SET C(6) = A(29); IF C(6) = 1 [@right, @left]
                                                 @right: SET A(8) = 1; ADD G; SET T(G) = H, I(G) = 21, T(G+1) = -987.987, I(G+1) = -987.987; Z4 ---> SX
                                                 @left: SET A(8) = 2; ADD G; SET T(G) = H, I(G) = 22, T(G+1) = -987.987, I(G+1) = -987.987; Z4 ---> SX
                       @choice: ADD G; SET T(G) = H, I(G) = 23, T(G+1) = -987.987, I(G+1) = -987.987; Z23 ---> S5
     #Z5: ---> S3
   S2,
     1#R^rightleverin: ADD G; SET T(G) = H, I(G) = 8, T(G+1) = -987.987, I(G+1) = -987.987, A(8) = 1; Z9; Z15;
                       IF A(45) = 0 [@NOLEVCRIT, @LEVCRIT]
                        @NOLEVCRIT: IF (A(4)>A(5)) OR (A(25)>A(26)) OR (A(27)>A(28)) OR (A(6)<A(7)) OR (A(3)> A(2)) [@HIT, @MISS]
                                     @HIT: Z4; SET Y(A(33)) = 1; ADD A(33) ---> S1
                                     @MISS: Z4; SET Y(A(33)) = 0; ADD A(33) ---> S1
                        @LEVCRIT: IF A(45) = 1 [@HIT, @MISS]
                                   @HIT: Z4; SET Y(A(33)) = 1; ADD A(33) ---> S1
                                   @MISS: Z4; SET Y(A(33)) = 0; ADD A(33) ---> S1
     1#R^leftleverin: ADD G; SET T(G) = H, I(G) = 9, T(G+1) = -987.987, I(G+1) = -987.987, A(8) = 2; Z10; Z15;
                      IF A(45) = 0 [@NOLEVCRIT, @LEVCRIT]
                       @NOLEVCRIT: IF (A(4)<A(5)) OR (A(25)<A(26)) OR (A(27)<A(28)) OR (A(6)>A(7)) OR (A(2)>A(3)) [@HIT, @MISS]
                                    @HIT: Z4; SET Y(A(33)) = 1; ADD A(33) ---> S1
                                    @MISS: Z4; SET Y(A(33)) = 0; ADD A(33) ---> S1
                       @LEVCRIT: IF A(45) = 2 [@HIT, @MISS]
                                  @HIT: Z4; SET Y(A(33)) = 1; ADD A(33) ---> S1
                                  @MISS: Z4; SET Y(A(33)) = 0; ADD A(33) ---> S1
     100*(A(18))#T: ADD G; SET T(G) = H, I(G) = 7, T(G+1) = -987.987, I(G+1) = -987.987; Z5; Z31 ---> S3
     #Z5: ---> S3
     #Z29: ---> S1
   S3,
     #Z6: IF (H >= (A(9) * 6000)) OR (A(16) > A(17)) OR ( (A(31)>=A(32)) AND (A(32)>0) AND (A(36)<>1) ) [@END, @NOTEND]
          @END: IF ((A(36)<>1) AND (A(61)>0)) OR ((A(31)>=A(32)) AND (A(32)>0) AND (A(61)>0)) [@RESET, @END]
                @RESET: ---> S1
                @END:   ---> S4
          @NOTEND: IF A(34) > 0 [@NOREPEAT, @REPEAT]
                   @NOREPEAT: LIST A(10) = F(C(5)); IF A(10) = 1 [@forced, @choice]
                              @forced: IF A(29) = 0 [@RANDOM, @NOTRANDOM]
                                       @RANDOM: RANDD C(8) = W; SET C(6) = O(C(8)); IF C(6) = 1 [@right, @left]
                                                @right: SET A(8) = 1;
                                                        IF A(210) > 0 [@HEREQ, @NOHEREQ]
                                                        @HEREQ: SET A(212) = 4 ---> S6
                                                        @NOHEREQ: Z4; ADD G; SET T(G) = H, I(G) = 21, T(G+1) = -987.987, I(G+1) = -987.987 ---> S1
                                                @left: SET A(8) = 2;
                                                       IF A(210) > 0 [@HEREQ, @NOHEREQ]
                                                       @HEREQ: SET A(212) = 4 ---> S6
                                                       @NOHEREQ: Z4; ADD G; SET T(G) = H, I(G) = 22, T(G+1) = -987.987, I(G+1) = -987.987 ---> S1
                                       @NOTRANDOM: SET C(6) = A(29); IF C(6) = 1 [@right, @left]
                                                   @right: SET A(8) = 1;
                                                           IF A(210) > 0 [@HEREQ, @NOHEREQ]
                                                           @HEREQ: SET A(212) = 4 ---> S6
                                                           @NOHEREQ: Z4; ADD G; SET T(G) = H, I(G) = 21, T(G+1) = -987.987, I(G+1) = -987.987 ---> S1
                                                   @left: SET A(8) = 2;
                                                          IF A(210) > 0 [@HEREQ, @NOHEREQ]
                                                          @HEREQ: SET A(212) = 4 ---> S6
                                                          @NOHEREQ: Z4; ADD G; SET T(G) = H, I(G) = 22, T(G+1) = -987.987, I(G+1) = -987.987 ---> S1
                              @choice: IF A(210) > 0 [@HEREQ, @NOHEREQ]
                                       @HEREQ: SET A(212) = 23 ---> S6
                                       @NOHEREQ: Z23; ADD G; SET T(G) = H, I(G) = 23, T(G+1) = -987.987, I(G+1) = -987.987 ---> S5
                   @REPEAT: IF A(10) = 1 [@FORCED, @CHOICE]
                            @FORCED: IF A(8) = 1 [@RIGHTFORCED, @LEFTFORCED]
                                     @RIGHTFORCED: IF A(210) > 0 [@HEREQ, @NOHEREQ]
                                                   @HEREQ: SET A(212) = 4 ---> S6
                                                   @NOHEREQ: Z4; ADD G; SET T(G) = H, I(G) = 21, T(G+1) = -987.987, I(G+1) = -987.987 ---> S1
                                     @LEFTFORCED: IF A(210) > 0 [@HEREQ, @NOHEREQ]
                                                  @HEREQ: SET A(212) = 4 ---> S6
                                                  @NOHEREQ: Z4; ADD G; SET T(G) = H, I(G) = 22, T(G+1) = -987.987, I(G+1) = -987.987 ---> S1
                            @CHOICE: IF A(210) > 0 [@HEREQ, @NOHEREQ]
                                     @HEREQ: SET A(212) = 23 ---> S6
                                     @NOHEREQ: Z23; ADD G; SET T(G) = H, I(G) = 23, T(G+1) = -987.987, I(G+1) = -987.987 ---> S5
     #Z29: ---> S1
   S4,
     #START: ---> SX
     #Z29: ---> S1
   S5,
     #Z24!#Z25: ---> S2
     #Z29: ---> S1
   S6,
     #Z3: IF A(212) = 4 [@GOZ4, @GOZ23]
          @GOZ4: Z4; IF A(8) = 1 [@RIGHTFORCED, @LEFTFORCED]
                 @RIGHTFORCED: ADD G; SET T(G) = H, I(G) = 21, T(G+1) = -987.987, I(G+1) = -987.987 ---> S1
                 @LEFTFORCED: ADD G; SET T(G) = H, I(G) = 22, T(G+1) = -987.987, I(G+1) = -987.987 ---> S1
          @GOZ23: Z23; ADD G; SET T(G) = H, I(G) = 23, T(G+1) = -987.987, I(G+1) = -987.987 ---> S5





S.S.7,   \Head Entries
   S1,
     #Z1: IF A(210) > 0 [@REQHE, @NOREQHE]
          @REQHE: ---> S7
          @NOREQHE: ---> S2
     #Z5: ---> S5
   S2,
     1#R^headentry: ADD G; SET T(G) = H, I(G) = 11, T(G+1) = -987.987, I(G+1) = -987.987; Z16 ---> SX
     #Z2: ---> S3
     #Z5: ---> S5
     #Z29: ---> S1
   S3,
     1#R^headentry: ADD G; SET T(G) = H, I(G) = 24, T(G+1) = -987.987, I(G+1) = -987.987; Z20 ---> S4
     #Z1: IF A(210) > 0 [@REQHE, @NOREQHE]
          @REQHE: ---> S7
          @NOREQHE: ---> S2
     #Z5: ---> S5
     #Z29: ---> S1
   S4,
     1#R^headentry: ADD G; SET T(G) = H, I(G) = 24, T(G+1) = -987.987, I(G+1) = -987.987; Z17 ---> SX
     #Z1: IF A(210) > 0 [@REQHE, @NOREQHE]
          @REQHE: ---> S7
          @NOREQHE: ---> S2
     #Z5: ---> S5
     #Z29: ---> S1
   S5,
     #Z6: IF (H >= (A(9) * 6000)) OR (A(16) > A(17)) OR ( (A(31)>=A(32)) AND (A(32)>0) AND (A(36)<>1) ) [@END, @NOTEND]
          @END: IF ((A(36)<>1) AND (A(61)>0)) OR ((A(31)>=A(32)) AND (A(32)>0) AND (A(61)>0)) [@RESET, @END]
                @RESET: ---> S1
                @END:   ---> S6
          @NOTEND: IF A(210) > 0 [@REQHE, @NOREQHE]
                   @REQHE: ---> S7
                   @NOREQHE: ---> S2
     #Z29: ---> S1
   S6,
     #START: ---> SX
     #Z29: ---> S1
   S7,
     1#R^headentry: ADD G; SET T(G) = H, I(G) = 31, T(G+1) = -987.987, I(G+1) = -987.987; Z16; Z3 ---> S2
     #Z29: ---> S1




S.S.8,   \Timeout Responses
   S1,
     #Z5: IF (H >= (A(9) * 6000)) OR (A(16) > A(17)) OR ( (A(31)>=A(32)) AND (A(32)>0) AND (A(36)<>1) ) [@END, @NOTEND]
          @END: IF ((A(36)<>1) AND (A(61)>0)) OR ((A(31)>=A(32)) AND (A(32)>0) AND (A(61)>0)) [@RESET, @END]
                @RESET: ---> S1
                @END:   ---> S3
          @NOTEND: ---> S2
   S2,
     1#R^rightleverin: ADD G; SET T(G) = H, I(G) = 12, T(G+1) = -987.987, I(G+1) = -987.987 ---> SX
     1#R^leftleverin: ADD G; SET T(G) = H, I(G) = 13, T(G+1) = -987.987, I(G+1) = -987.987 ---> SX
     1#R^headentry: ADD G; SET T(G) = H, I(G) = 14, T(G+1) = -987.987, I(G+1) = -987.987; Z18 ---> SX
     #Z6: IF (H >= (A(9) * 6000)) OR (A(16) > A(17)) OR ( (A(31)>=A(32)) AND (A(32)>0) AND (A(36)<>1) ) [@END, @NOTEND]
          @END: IF ((A(36)<>1) AND (A(61)>0)) OR ((A(31)>=A(32)) AND (A(32)>0) AND (A(61)>0)) [@RESET, @END]
                @RESET: ---> S1
                @END:   ---> S3
          @NOTEND: ---> S1
     #Z29: ---> S1
   S3,
     #START: ---> SX
     #Z29: ---> S1




S.S.9,    \Houselight, Feeder, and 6-sec traylight
   S1,
     #Z3: ON ^houselt; IF (H >= (A(9) * 6000)) OR (A(16) > A(17)) OR ( (A(31)>=A(32)) AND (A(32)>0) AND (A(36)<>1) ) [@END, @NOTEND]
                       @END: IF ((A(36)<>1) AND (A(61)>0)) OR ((A(31)>=A(32)) AND (A(32)>0) AND (A(61)>0)) [@RESET, @END]
                             @RESET: ---> S1
                             @END: OFF ^houselt ---> S9
                       @NOTEND: ---> S2
     #Z5: OFF ^houselt ---> S8
   S2,
     #Z2: SET C(16) = 1; IF A(8) = 1 [@right, @left]
             @right: IF (A(22) = 1) OR (A(22) = 3) [@PROB, @NOPROB]
                         @PROB: LIST A(23) = N(C(9)); SET C(13) = A(6); IF A(23) = 0 [@REINF0, @REINF1]
                                                      @REINF0: SET C(2) = A(25), C(1) = 600 - (10*C(2)), C(13) = A(6); IF C(2) > 0 [@ADD, @NOADD]
                                                                                 @ADD: ADD C(7), C(11); SHOW 2+A(67), "Reinforced trials: ", C(7); SHOW 6+A(67), "Reinforced right trials: ", C(11) ---> S3
                                                                                 @NOADD: ---> S3
                                                      @REINF1: SET C(2) = A(27), C(1) = 600 - (10*C(2)), C(13) = A(6); IF C(2) > 0 [@ADD, @NOADD]
                                                                                 @ADD: ADD C(7), C(11); SHOW 2+A(67), "Reinforced trials: ", C(7); SHOW 6+A(67), "Reinforced right trials: ", C(11); Z26 ---> S3
                                                                                 @NOADD: ---> S3
                         @NOPROB: IF A(4) = 0 [@EXTINCTION, @NOEXTINCTION]
                                  @EXTINCTION: ADD G; SET T(G) = H, I(G) = 26, T(G+1) = -987.987, I(G+1) = -987.987, C(1) = 600, C(2) = 0, C(13) = A(6) ---> S3
                                  @NOEXTINCTION: ADD C(7), C(11); SHOW 2+A(67), "Reinforced trials: ", C(7); SHOW 5+A(67), "Reinforced right trials: ", C(11); SET C(2) = A(4), C(1) = 600 - (10*C(2)), C(13) = A(6) ---> S3
             @left: IF (A(22) = 2) OR (A(22) = 3) [@PROB, @NOPROB]
                        @PROB: LIST A(23) = S(C(14)); SET C(13) = A(7); IF A(23) = 0 [@REINF0, @REINF1]
                                                     @REINF0: SET C(2) = A(26), C(1) = 600 - (10*C(2)), C(13) = A(7); IF C(2) > 0 [@ADD, @NOADD]
                                                                                @ADD: ADD C(7), C(12); SHOW 2+A(67), "Reinforced trials: ", C(7); SHOW 5+A(67), "Reinforced left trials: ", C(12) ---> S3
                                                                                @NOADD: ---> S3
                                                     @REINF1: SET C(2) = A(28), C(1) = 600 - (10*C(2)), C(13) = A(7); IF C(2) > 0 [@ADD, @NOADD]
                                                                                @ADD: ADD C(7), C(12); SHOW 2+A(67), "Reinforced trials: ", C(7); SHOW 5+A(67), "Reinforced left trials: ", C(12); Z26 ---> S3
                                                                                @NOADD: ---> S3
                        @NOPROB: IF A(5) = 0 [@EXTINCTION, @NOEXTINCTION]
                                 @EXTINCTION: ADD G; SET T(G) = H, I(G) = 26, T(G+1) = -987.987, I(G+1) = -987.987, C(1) = 600, C(2) = 0, C(13) = A(7) ---> S3
                                 @NOEXTINCTION: ADD C(7), C(12); SHOW 2+A(67), "Reinforced trials: ", C(7); SHOW 6+A(67), "Reinforced left trials: ", C(12); SET C(2) = A(5), C(1) = 600 - (10*C(2)), C(13) = A(7) ---> S3

     #Z5: OFF ^houselt ---> S8
     #Z29: ---> S1
   S3,
     100*C(13)#T: ON ^traylt; Z19; IF C(2) = 0 [@done, @notdone]
              @done: IF A(8) = 1 [@right, @left]
                     @right: Z7 ---> S7
                     @left: Z8 ---> S7
              @notdone: ---> S6
   S5,
     0.1": OFF A(64); IF C(2) = 0 [@DONE, @NOTDONE]
                        @DONE: IF A(8) = 1 [@right, @left]
                               @right: Z7 ---> S7
                               @left: Z8 ---> S7
                        @NOTDONE: ---> S6
   S6,
     0.1": ON A(64); SUB C(2); ADD G; SET T(G) = H, I(G) = 5, T(G+1) = -987.987, I(G+1) = -987.987 ---> S5
   S7,
     C(1)#T: OFF ^traylt, ^houselt; SET C(16) = 2 ---> S1
   S8,
     #Z6: IF (H >= (A(9) * 6000)) OR (A(16) > A(17)) OR ( (A(31)>=A(32)) AND (A(32)>0) AND (A(36)<>1) ) [@END, @NOTEND]
          @END: IF ((A(36)<>1) AND (A(61)>0)) OR ((A(31)>=A(32)) AND (A(32)>0) AND (A(61)>0)) [@RESET, @END]
                @RESET: OFF ^traylt, A(64) ---> S1
                @END:   ---> S9
          @NOTEND: IF A(210) > 0 [@HEREQ, @NOHEREQ]
                   @HEREQ: ---> S10
                   @NOHEREQ: ON ^houselt ---> S2
     #Z29: ---> S1
   S9,
     #START: ---> SX
     #Z29: ---> S1
   S10,
     #Z3: ON ^houselt ---> S2





S.S.10,    \Cue Lights
   S1,
     #Z23: ON ^rightlt; ON ^leftlt; Z27; Z28;
           ADD G; SET T(G) = H, I(G) = 32, T(G+1) = -987.987, I(G+1) = -987.987;
           ADD G; SET T(G) = H, I(G) = 33, T(G+1) = -987.987, I(G+1) = -987.987 ---> SX
     #Z4: IF A(8) = 1 [@right, @left]
             @right: IF A(10) = 1 [@FORCED, @CHOICE]
                     @FORCED: OFF ^leftlt; ON ^rightlt; Z27;
                              ADD G; SET T(G) = H, I(G) = 32, T(G+1) = -987.987, I(G+1) = -987.987;
                              ADD G; SET T(G) = H, I(G) = 35, T(G+1) = -987.987, I(G+1) = -987.987 ---> S2
                     @CHOICE: OFF ^leftlt; ON ^rightlt;
                              ADD G; SET T(G) = H, I(G) = 32, T(G+1) = -987.987, I(G+1) = -987.987;
                              ADD G; SET T(G) = H, I(G) = 35, T(G+1) = -987.987, I(G+1) = -987.987 ---> S2
             @left: IF A(10) = 1 [@FORCED, @CHOICE]
                    @FORCED: OFF ^rightlt; ON ^leftlt; Z28;
                             ADD G; SET T(G) = H, I(G) = 34, T(G+1) = -987.987, I(G+1) = -987.987;
                             ADD G; SET T(G) = H, I(G) = 33, T(G+1) = -987.987, I(G+1) = -987.987 ---> S2
                    @CHOICE: OFF ^rightlt; ON ^leftlt;
                             ADD G; SET T(G) = H, I(G) = 34, T(G+1) = -987.987, I(G+1) = -987.987;
                             ADD G; SET T(G) = H, I(G) = 33, T(G+1) = -987.987, I(G+1) = -987.987 ---> S2
     #Z5: OFF ^rightlt; OFF ^leftlt;
          ADD G; SET T(G) = H, I(G) = 34, T(G+1) = -987.987, I(G+1) = -987.987;
          ADD G; SET T(G) = H, I(G) = 35, T(G+1) = -987.987, I(G+1) = -987.987 ---> S3
   S2,
     #Z2: IF A(43) = 0 [@CUEOFF, @CUEWAIT]
          @CUEOFF: OFF ^rightlt; OFF ^leftlt;
                   ADD G; SET T(G) = H, I(G) = 34, T(G+1) = -987.987, I(G+1) = -987.987;
                   ADD G; SET T(G) = H, I(G) = 35, T(G+1) = -987.987, I(G+1) = -987.987 ---> S1
          @CUEWAIT: ---> S5
     #Z5: OFF ^rightlt; OFF ^leftlt;
          ADD G; SET T(G) = H, I(G) = 34, T(G+1) = -987.987, I(G+1) = -987.987;
          ADD G; SET T(G) = H, I(G) = 35, T(G+1) = -987.987, I(G+1) = -987.987 ---> S3
     #Z29: OFF ^rightlt, ^leftlt;
           ADD G; SET T(G) = H, I(G) = 34, T(G+1) = -987.987, I(G+1) = -987.987;
           ADD G; SET T(G) = H, I(G) = 35, T(G+1) = -987.987, I(G+1) = -987.987 ---> S1
   S3,
     #Z6: IF (H >= (A(9) * 6000)) OR (A(16) > A(17)) OR ( (A(31)>=A(32)) AND (A(32)>0) AND (A(36)<>1) ) [@END, @NOTEND]
          @END: IF ((A(36)<>1) AND (A(61)>0)) OR ((A(31)>=A(32)) AND (A(32)>0) AND (A(61)>0)) [@RESET, @END]
                @RESET: OFF ^rightlt, ^leftlt;
                        ADD G; SET T(G) = H, I(G) = 34, T(G+1) = -987.987, I(G+1) = -987.987;
                        ADD G; SET T(G) = H, I(G) = 35, T(G+1) = -987.987, I(G+1) = -987.987 ---> S1
                @END:   ---> S4
          @NOTEND: ---> S1
     #Z29: OFF ^rightlt, ^leftlt;
           ADD G; SET T(G) = H, I(G) = 34, T(G+1) = -987.987, I(G+1) = -987.987;
           ADD G; SET T(G) = H, I(G) = 35, T(G+1) = -987.987, I(G+1) = -987.987 ---> S1
   S4,
     #START: ---> SX
     #Z29: OFF ^rightlt, ^leftlt;
           ADD G; SET T(G) = H, I(G) = 34, T(G+1) = -987.987, I(G+1) = -987.987;
           ADD G; SET T(G) = H, I(G) = 35, T(G+1) = -987.987, I(G+1) = -987.987 ---> S1
   S5,
     100*C(13)#T: OFF ^rightlt; OFF ^leftlt;
                  ADD G; SET T(G) = H, I(G) = 34, T(G+1) = -987.987, I(G+1) = -987.987;
                  ADD G; SET T(G) = H, I(G) = 35, T(G+1) = -987.987, I(G+1) = -987.987 ---> S1
     #Z29: OFF ^rightlt, ^leftlt;
           ADD G; SET T(G) = H, I(G) = 34, T(G+1) = -987.987, I(G+1) = -987.987;
           ADD G; SET T(G) = H, I(G) = 35, T(G+1) = -987.987, I(G+1) = -987.987 ---> S1





S.S.11,    \Time-out timer for missed trials
   S1,
     #Z5: IF (H >= (A(9) * 6000)) OR (A(16) > A(17)) OR ( (A(31)>=A(32)) AND (A(32)>0) AND (A(36)<>1) ) [@END, @NOTEND]
          @END: IF ((A(36)<>1) AND (A(61)>0)) OR ((A(31)>=A(32)) AND (A(32)>0) AND (A(61)>0)) [@RESET, @END]
                @RESET: ---> S1
                @END:   ---> SX
          @NOTEND: ADD A(16); IF (A(35)>0) AND (A(38)=1) [@OVERRUN, @NOOVERRUN]  \ A(38) inidcate that seesion is in overrun
                   @OVERRUN: SHOW 9+A(67), Overrun trial#: , (A(35)-(A(37)-1)); SUB A(37); IF A(37) = 0 [@FIN, @NOTFIN]
                             @FIN: SET A(36) = 0 ---> S2
                             @NOTFIN: ---> S2
                   @NOTOVERRUN: ---> S2
   S2,
     100*A(12)#T: ADD G; SET T(G) = H, I(G) = 15, T(G+1) = -987.987, I(G+1) = -987.987; Z6;
                  IF A(210) > 0 [@REQHE, @NOREQHE]
                  @REQHE: IF A(16) > A(17) [@noshowtrial, @showtrial]
                          @noshowtrial: ---> S1
                          @showtrial: SHOW 1+A(67), "Trial #: ", A(16) ---> S1
                  @NOREQHE: Z22; IF A(16) > A(17) [@noshowtrial, @showtrial]
                            @noshowtrial: ---> S1
                            @showtrial: SHOW 1+A(67), "Trial #: ", A(16) ---> S1
     #Z29: ---> S1





S.S.12,     \ Set feeder type and ITI list
   S1,
     #START!#Z30: IF A(69) = 0 [@NOFRCOMP, @FRCOMP]
                   @NOFRCOMP: SET A(73) = A(71), A(71) = - (A(71)*A(72)); IF A(70)>(A(73)*A(72)) [@STANDARD, @DEFAULT]
                               @STANDARD: ---> S2
                               @DEFAULT: SET A(70) = 45, A(71) = -15, A(72) = 1, A(73) = 15 ---> S2
                   @FRCOMP: IF A(62) = 0 [@STANDARD, @SPECIAL]
                             @STANDARD: SET A(64) = ^feeder ---> SX
                             @SPECIAL:  SET A(64) = ^specialfeeder ---> SX
   S2,
     0": SET E(A(74)) = A(70) + A(71), A(71) = A(71) + A(73); IF (A(71) > (A(73)*A(72))) OR (A(73) = 0) [@DONE, @NOTDONE]
         @DONE: IF A(62) = 0 [@STANDARD, @SPECIAL]
                   @STANDARD: SET A(64) = ^feeder, A(74) = 0 ---> S1
                   @SPECIAL:  SET A(64) = ^specialfeeder, A(74) = 0 ---> S1
         @NOTDONE: ADD A(74) ---> S2





S.S.13,    \ Time-out for taking too long to complete FR
   S1,
     #Z9!#Z10!#Z13!#Z14: IF C(4) <= 1 [@FRONE, @NOTFRONE]
                         @FRONE: ---> S1
                         @NOTFRONE: ---> S2
   S2,
     6000*A(24)#T: ADD G; SET T(G) = H, I(G) = 27, T(G+1) = -987.987, I(G+1) = -987.987; Z5; Z31 ---> S3
     #Z2: ---> S1
     #Z5: ---> S3
     #Z29: ---> S1
   S3,
     #Z6: IF (H >= (A(9) * 6000)) OR (A(16) > A(17)) OR ( (A(31)>=A(32)) AND (A(32)>0) AND (A(36)<>1) ) [@END, @NOTEND]
          @END: IF ((A(36)<>1) AND (A(61)>0)) OR ((A(31)>=A(32)) AND (A(32)>0) AND (A(61)>0)) [@RESET, @END]
                @RESET: ---> S1
                @END:   ---> S4
          @NOTEND: ---> S1
     #Z29: ---> S1
   S4,
     #START: ---> SX
     #Z29: ---> S1





S.S.14,    \ Set up lists for levers and probabilities before START
   S1,
     0": SET A(21) = -1; RANDI C(10) = K; RANDI C(9) = M; RANDI C(14) = M ---> S2
   S2,
     0": ADD A(21); IF A(21)>3 [@ENDMAKE, @CONTMAKE]
         @ENDMAKE: ---> S3
         @CONTMAKE: IF C(10) = 1 [@CH1, @CHANOTHER]
                    @CH1: SET O(A(21)) = J(A(21)) ---> S2
                    @CHANOTHER: IF C(10) = 2 [@CH2, @CHANOTHER]
                                @CH2: SET O(A(21)) = P(A(21)) ---> S2
                                @CHANOTHER: IF C(10) = 3 [@CH3, @CHANOTHER]
                                            @CH3: SET O(A(21)) = Q(A(21)) ---> S2
                                            @CHANOTHER: SET O(A(21)) = R(A(21)) ---> S2
   S3,
     0": SET A(21) = -1; RANDI C(10) = K ---> S4
   S4,
     0": ADD A(21); IF A(21)>99 [@ENDMAKE, @CONTMAKE]
         @ENDMAKE: ---> S5
         @CONTMAKE: IF C(10) < 3 [@CH1, @CHANOTHER]
                    @CH1: SET N(A(21)) = B(A(21)) ---> S4
                    @CHANOTHER: SET N(A(21)) = D(A(21)) ---> S4
   S5,
     0": SET A(21) = -1; RANDI C(10) = K ---> S6
   S6,
     0": ADD A(21); IF A(21)>99 [@ENDMAKE, @CONTMAKE]
         @ENDMAKE: ---> S12
         @CONTMAKE: IF C(10) < 3 [@CH1, @CHANOTHER]
                    @CH1: SET S(A(21)) = U(A(21)) ---> S6
                    @CHANOTHER: SET S(A(21)) = V(A(21)) ---> S6
   S7,
     0": SET A(95) = A(2), A(81) = A(3), A(82) = A(4), A(83) = A(5), A(84) = A(6), A(85) = A(7);
         SET A(86) = A(25), A(87) = A(26), A(88) = A(27), A(89) = A(28), A(90) = A(32);
         SET A(91) = A(45), A(92) = A(40), A(93) = A(14), A(94) = A(35), A(96) = A(69);
         SET A(97) = A(15), A(98) = A(70), A(99) = A(71), A(100) = A(72), A(101) = A(17), A(102) = A(9);
         SET A(103) = F(0), A(104) = F(1), A(105) = F(2), A(106) = F(3), A(107) = F(4), A(108) = F(5), A(109) = F(6), A(110) = F(7), A(111) = A(12);
         Z29; ADD G; SET T(G) = H, I(G) = 29, T(G+1) = -987.987, I(G+1) = -987.987;
         IF C(16) <> 1 [@RESET, @WAIT]
          @RESET: ---> S9
          @WAIT: ---> S10
   S9,
     100*A(63)#T: Z30; ADD G; SET T(G) = H, I(G) = 30, T(G+1) = -987.987, I(G+1) = -987.987 ---> S1
   S10,
     0": IF C(16) <> 1 [@RESET, @WAIT]
         @RESET: ---> S9
         @WAIT: ---> S10
   S11,
      0.02": IF ((H > (A(9)*6000)) OR (A(16) > A(17))) AND (A(61) > 0) [@RESET, @WAIT]
             \ Check to see if the session timed out or over trial limit and you are supposed to reset
             @RESET: ---> S7
             @WAIT: ---> S11
     #Z29: SET A(95) = A(2), A(81) = A(3), A(82) = A(4), A(83) = A(5), A(84) = A(6), A(85) = A(7);
           SET A(86) = A(25), A(87) = A(26), A(88) = A(27), A(89) = A(28), A(90) = A(32);
           SET A(91) = A(45), A(92) = A(40), A(93) = A(14), A(94) = A(35), A(96) = A(69);
           SET A(97) = A(15), A(98) = A(70), A(99) = A(71), A(100) = A(72), A(101) = A(17), A(102) = A(9);
           SET A(103) = F(0), A(104) = F(1), A(105) = F(2), A(106) = F(3), A(107) = F(4), A(108) = F(5), A(109) = F(6), A(110) = F(7), A(111) = A(12);
           ADD G; SET T(G) = H, I(G) = 29, T(G+1) = -987.987, I(G+1) = -987.987;
           IF C(16) <> 1 [@RESET, @WAIT]
           @RESET: ---> S9
           @WAIT: ---> S10
   S12,
      #START: IF A(61) > 0 [@CHECKRESET, @NORESET]
              @CHECKRESET: ---> S11
              @NORESET: ---> S12





S.S.15,     \ Check Y list to see if contingencies should end (adapted from satiety program)
   S1,
     #Z7!#Z8: IF A(32) > 0 [@CRITERION, @NOCRITERION]
              @CRITERION: IF A(33) > 12 [@MOVEFRAME, @CHECK9]      \ Completed choice trials 1-12 and up
                          @MOVEFRAME: SET A(30) = A(33), A(31) = 0 ---> S2
                          @CHECKK9: SET A(30) = A(33), A(31) = 0 ---> S3
              @NOCRITERION: ---> SX
     #Z5: ---> S4
   S2,
     0": SUB A(30); IF A(30) < (A(33) - 12) [@DONE, @NOTDONE]
                     @DONE: IF A(31) >= A(32) [@OVERRUN, @NOOVERRUN]
                            @OVERRUN: SET A(38) = 1; SHOW 7+A(67), HR/LE choice# last 12: , A(31); IF A(35)>0 [@NOTDONE, @DONE]
                                      @NOTDONE: SHOW 9+A(67), Overrun trial#: , (A(35)-(A(37)-1)); SUB A(37); IF A(37) = 0 [@FIN, @NOTFIN]
                                                @FIN: SET A(36) = 0; IF A(61) > 0 [@RESET, @NORESET]
                                                      @RESET: ADD C(15); Z29 ---> S8
                                                      @NORESET: Z5 ---> S6
                                                @NOTFIN: ---> S7
                                      @DONE: IF A(61) > 0 [@RESET, @NORESET]
                                             @RESET: ADD C(15); Z29 ---> S8
                                             @NORESET: Z5 ---> S6
                            @NOOVERRUN: SHOW 7+A(67), HR/LE choice# last 12: , A(31) ---> S1
                     @NOTDONE: IF Y(A(30)) = 1 [@HIT, @MISS]
                               @HIT: ADD A(31) ---> S2
                               @MISS: ---> S2
   S3,
     0": SUB A(30); IF A(30) < 0 [@DONE, @NOTDONE]
                     @DONE: IF A(31) >= A(32) [@OVERRUN, @NOOVERRUN]
                            @OVERRUN: SET A(38) = 1; SHOW 7+A(67), HR/LE choice#: , A(31); IF A(35)>0 [@NOTDONE, @DONE]
                                      @NOTDONE: SHOW 9+A(67), Overrun trial#: , (A(35)-(A(37)-1)); SUB A(37); IF A(37) = 0 [@FIN, @NOTFIN]
                                                @FIN: SET A(36) = 0; IF A(61) > 0 [@RESET, @NORESET]
                                                      @RESET: ADD C(15); Z29 ---> S8
                                                      @NORESET: Z5 ---> S6
                                                @NOTFIN: ---> S7
                                      @DONE: IF A(61) > 0 [@RESET, @NORESET]
                                             @RESET: ADD C(15); Z29 ---> S8
                                             @NORESET: Z5 ---> S6
                            @NOOVERRUN: SHOW 7+A(67), HR/LE choice#: , A(31) ---> S1
                     @NOTDONE: IF Y(A(30)) = 1 [@HIT, @MISS]
                               @HIT: ADD A(31) ---> S3
                               @MISS: ---> S3
   S4,
    #Z6: IF (H >= (A(9) * 6000)) OR (A(16) > A(17)) OR ( (A(31)>=A(32)) AND (A(32)>0) AND (A(36)<>1) ) [@END, @NOTEND]
          @END: IF ((A(36)<>1) AND (A(61)>0)) OR ((A(31)>=A(32)) AND (A(32)>0) AND (A(61)>0)) [@RESET, @END]
                @RESET: ADD C(15); Z29 ---> S8
                @END:   ---> S5
          @NOTEND: ---> S1
   S5,
     #R8: ---> SX
   S6,
     0": Z6 ---> S5
   S7,
     #Z7!#Z8: SHOW 9+A(67), Overrun trial#: , (A(35)-(A(37)-1)); SUB A(37); IF A(37) = 0 [@FIN, @NOTFIN]
               @FIN: SET A(36) = 0; IF A(61) > 0 [@RESET, @NORESET]
                     @RESET: ADD C(15); Z29 ---> S8
                     @NORESET: Z5 ---> S6
               @NOTFIN: ---> S7
   S8,
     #Z30: ---> S1





S.S.16,    \Session timer and trial number limit
  S1,
     #START: ---> S2
  S2,
     0.01": ADD H; IF (H < (A(9) * 6000)) AND (A(16) <= A(17)) AND ( (A(32) > A(31)) OR (A(32)=0) OR (A(36)=1) OR (A(61)>0) ) [@NOEND, @MAYEND]
         @NOEND: ---> SX
             @MAYEND: IF H >= (A(9) * 6000) [@YESEND, @COULDEND]
                      @YESEND: Z5; ADD G; SET T(G) = -987.987, I(G) = -987.987; OFF ^houselt; ON ^whitenoise ---> S4
                      @COULDEND: ---> S3
    #Z29: ---> S7
  S3,
    0.01": ADD H; IF ((S.S.1 = 6) OR (S.S.1 = 3)) AND (S.S.11 = 1) [@ENDNOW, @ENDLATER]
        @ENDNOW: Z5; ADD G; SET T(G) = -987.987, I(G) = -987.987; OFF ^houselt; ON ^whitenoise;
                 IF A(44) = 0 [@END, @WAITFOR8]
                 @END: ---> S6
                 @WAITFOR8: ---> S4
        @ENDLATER: ---> SX
   #Z29: ---> S7
  S4,
   #R8: ---> STOPABORTFLUSH
   #R6: ON A(64); Z19 ---> S5
  S5,
   0.05": OFF A(64) ---> S4
  S6,
   5": ---> STOPABORTFLUSH
  S7,
   #Z30: ---> S2
   0.01": ADD H ---> S7







S.S.17,     \ TTL Outputs and ICS
   S1,
     #Z9: ON 17 ---> S2
   S2,
     0.2": OFF 17 ---> S1

S.S.18,
   S1,
    #Z10: ON 18 ---> S2
   S2,
     0.2": OFF 18 ---> S1

S.S.19,
   S1,
    #Z11: ON 25 ---> S2
   S2,
     0.2": OFF 25 ---> S1

S.S.20,
   S1,
    #Z12: ON 26 ---> S2
   S2,
     0.2": OFF 26 ---> S1

S.S.21,
   S1,
    #Z24!#Z25: ON 19 ---> S2
   S2,
     0.2": OFF 19 ---> S1

S.S.22,
   S1,
    #Z28: ON 20 ---> S2
   S2,
     0.2": OFF 20 ---> S1

S.S.23,
   S1,
    #Z13: ON 21 ---> S2
   S2,
     0.2": OFF 21 ---> S1

S.S.24,
   S1,
    #Z14: ON 22 ---> S2
   S2,
     0.2": OFF 22 ---> S1

S.S.25,
   S1,
    #Z15: ON 23 ---> S2
   S2,
     0.2": OFF 23 ---> S1

S.S.26,
   S1,
    #Z16!#Z17!#Z18: ON 24 ---> S2
   S2,
     0.2": OFF 24 ---> S1

\
\S.S.25,
\   S1,
\    #Z17: ON 25 ---> S2
\   S2,
\     0.2": OFF 25 ---> S1
\
\S.S.26,
\   S1,
\    #Z18: ON 26 ---> S2
\   S2,
\     0.2": OFF 26 ---> S1
\

S.S.27,
   S1,
    #Z19: ON 27 ---> S2
   S2,
     0.2": OFF 27 ---> S1

S.S.28,
   S1,
    #Z20: ON 28 ---> S2
   S2,
     0.2": OFF 28 ---> S1

S.S.29,
   S1,
    #Z23: ON 29 ---> S2
   S2,
     0.2": OFF 29 ---> S1

S.S.30,
   S1,
    #Z31: ON 30 ---> S2
   S2,
    0.2": OFF 30 ---> S1

S.S.31,
   S1,
    #Z27: ON 31 ---> S2
   S2,
    0.2": OFF 31 ---> S1

S.S.32,  \ ICS signals and ITI or TO over - NOTE Z21 REPLACED WITH Z3 IN VERSION 34_1 ON
\   S1,
\    #Z21: IF C(3) = 1 [@ICS, @NOICS]
\              @ICS: ON 32; ADD G; SET T(G) = H, I(G) = 25, T(G+1) = -987.987, I(G+1) = -987.987 ---> S2
\              @NOICS: ON 32 ---> S2
\    #Z22: IF C(3) = 1 [@IICS, @NNOICS]
\              @IICS: ON 32; ADD G; SET T(G) = H, I(G) = 25, T(G+1) = -987.987, I(G+1) = -987.987 ---> S2
\              @NNOICS: ON 32 ---> S2
\   S2,
\    0.2": OFF 32 ---> S1
   S1,
    #Z3!#Z22: IF C(3) = 1 [@ICS, @NOICS]
              @ICS: ON 32; ADD G; SET T(G) = H, I(G) = 25, T(G+1) = -987.987, I(G+1) = -987.987 ---> S2
              @NOICS: ON 32 ---> S2
   S2,
    0.2": OFF 32 ---> S1

